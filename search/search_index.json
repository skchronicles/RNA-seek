{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"RNA-seek \u00b6 An open-source, reproducible, and scalable solution for analyzing RNA-sequencing data. 1. Introduction \u00b6 Welcome to RNA-seek's documentation! This guide is the main source of documentation for users that are getting started with the RNA-seek pipeline . If you are not familiar with RNA-sequencing, please checkout our theory and practical guide . That section provides a conceptual overview to RNA-seq analysis and as well as a set of generalized guidelines to interpret different quality-control metrics. If you are a new user, we highly recommend reading through our getting started section. This page contains information needed to quickly build new reference files and setup the pipeline for running in your compute environment. RNA-seek is composed several inter-related sub commands to faciliate the analysis of RNA-sequencing data. For more information about each available sub command, please see the usage section . To help out new users, an example of each command is also provided. The resources page contains more information about the pipeline's default reference genomes along with every tool and Docker image the pipeline employs. For more information about issues or trouble-shooting a problem, please checkout our FAQ prior to opening an issue on Github . 2. Overview \u00b6 RNA-seek is a comprehensive, open-source RNA-seq pipeline that relies on technologies like Docker 1 and Singularity 2 to maintain the highest-level of reproducibility. The pipeline consists of a series of data processing and quality-control steps orchestrated by Snakemake 3 , a flexible and scalable workflow management system, to submit jobs to a cluster or cloud provider. RNA-seek can be run locally on a compute instance, on-premise using a cluster, or on the cloud using AWS. A user can define the method or mode of execution. The pipeline can submit jobs to a cluster using a job scheduler like SLURM, or run on AWS using Tibanna (feature coming soon!). A hybrid approach ensures the pipeline is accessible to all users. A bioinformatics pipeline is more than the sum of its data processing steps. A pipeline without quality-control steps provides a myopic view of the potential sources of variation within your data (i.e., biological verses technical sources of variation). RNA-seek pipeline is composed of a series of quality-control and data processing steps. Fig 1. An Overview of the Quantification and Quality-control Pipeline. Gene and isoform counts are quantified and a series of QC-checks are performed to assess the quality of the data. This pipeline stops at the generation of a raw counts matrix, which is input to the next sub-workflow. To run the pipeline, a user must select their raw data directory (i.e. the location to their FastQ files), a reference genome, and output directory (i.e. the location where the pipeline performs the analysis). Quality-control information is summarized across all samples in the MultiQC and RNA report. 3. Pipeline \u00b6 The accuracy of the downstream interpretations made from transcriptomic data are highly dependent on initial sample library. Unwanted sources of technical variation, which if not accounted for properly, can influence the results. In addition to generating a MultiQC report, the RNA-seek pipeline also generates a rNA Report to interactively allow users to identify problematic samples prior to performing any downstream analysis. RNA-seek's comprehensive quality-control helps ensure your results are reliable and reproducible across experiments. In the data processing steps, RNA-seek quantifies gene and isoform expression and predicts gene fusions. Please note that the detection of alternative splicing events and variant calling will be incorporated in a later release. 3.1 Quality Control \u00b6 Quality Control FastQC 4 is used to assess the sequencing quality. FastQC is run twice, before and after adapter trimming. It generates a set of basic statistics to identify problems that can arise during sequencing or library preparation. FastQC will summarize per base and per read QC metrics such as quality scores and GC content. It will also summarize the distribution of sequence lengths and will report the presence of adapter sequences. Kraken2 5 and FastQ Screen 6 are used to screen for various sources of contamination. During the process of sample collection to library preparation, there is a risk for introducing wanted sources of DNA. FastQ Screen compares your sequencing data to a set of different reference genomes to determine if there is contamination. It allows a user to see if the composition of your library matches what you expect. Also, if there are high levels of microbial contamination, Kraken can provide an estimation of the taxonomic composition. Kraken can be used in conjunction with Krona 7 to produce interactive reports. Preseq 8 is used to estimate the complexity of a library for each samples. If the duplication rate is very high, the overall library complexity will be low. Low library complexity could signal an issue with library preparation where very little input RNA was over-amplified or the sample may be degraded. Picard 9 can be used to estimate the duplication rate, and it has another particularly useful sub-command called CollectRNAseqMetrics which reports the number and percentage of reads that align to various regions: such as coding, intronic, UTR, intergenic and ribosomal regions. This is particularly useful as you would expect a library constructed with ploy(A)-selection to have a high percentage of reads that map to coding regions. Picard CollectRNAseqMetrics will also report the uniformity of coverage across all genes, which is useful for determining whether a sample has a 3' bias (observed in ploy(A)-selection libraries containing degraded RNA). RSeQC 10 is another particularity useful package that is tailored for RNA-seq data. It is used to calculate the inner distance between paired-end reads and calculate TIN values for a set of canonical protein-coding transcripts. A median TIN value is calucated for each sample, which analogous to a computationally derived RIN. MultiQC 11 is used to aggreate the results of each tool into a single interactive report. 3.2 Data Processing \u00b6 Cutadapt 12 is used to remove adapter sequences, perform quality trimming, and remove very short sequences that would otherwise multi-map all over the genome prior to alignment. STAR 13 is used to align reads to the reference genome. The RNA-seek pipeline runs STAR in a two-passes where splice-junctions are collected and aggregated across all samples and provided to the second-pass of STAR. In the second pass of STAR, the splice-junctions detected in the first pass are inserted into the genome indices prior to alignment. RSEM 14 is used to quantify gene and isoform expression. The expected counts from RSEM are merged across samples to create a two counts matrices for gene counts and isoform counts. Arriba 15 is used to predict gene-fusion events. The pre-built human and mouse reference genomes use Arriba blacklists to reduce the false-positive rate. 4. Contribute \u00b6 This site is a living document, created for and by the genomics community. RNA-seek is maintained by the developers and bioinformaticians at the NIH and is improved by feedback from external collaborators like you ! We want to make it easy for users to connect with us to share ideas, solve problems, and to continuously deliver the best pipelines. We encourage you to contribute new content and make improvements to existing content via pull request to our GitHub repository . Please checkout our project's roadmap to see our planned improvements for the next release of RNA-seek. 5. References \u00b6 1. Merkel, D. (2014). Docker: lightweight linux containers for consistent development and deployment. Linux Journal, 2014(239), 2. 2. Kurtzer GM, Sochat V, Bauer MW (2017). Singularity: Scientific containers for mobility of compute. PLoS ONE 12(5): e0177459. 3. Koster, J. and S. Rahmann (2018). \"Snakemake-a scalable bioinformatics workflow engine.\" Bioinformatics 34(20): 3600. 4. Andrews, S. (2010). FastQC: a quality control tool for high throughput sequence data. 5. Wood, D. E. and S. L. Salzberg (2014). \"Kraken: ultrafast metagenomic sequence classification using exact alignments.\" Genome Biol 15(3): R46. 6. Wingett, S. and S. Andrews (2018). \"FastQ Screen: A tool for multi-genome mapping and quality control.\" F1000Research 7(2): 1338. 7. Ondov, B. D., et al. (2011). \"Interactive metagenomic visualization in a Web browser.\" BMC Bioinformatics 12(1): 385. 8. Daley, T. and A.D. Smith, Predicting the molecular complexity of sequencing libraries. Nat Methods, 2013. 10(4): p. 325-7. 9. The Picard toolkit. https://broadinstitute.github.io/picard/ . 10. Wang, L., et al. (2012). \"RSeQC: quality control of RNA-seq experiments.\" Bioinformatics 28(16): 2184-2185. 11. Ewels, P., et al. (2016). \"MultiQC: summarize analysis results for multiple tools and samples in a single report.\" Bioinformatics 32(19): 3047-3048. 12. Martin, M. (2011). \"Cutadapt removes adapter sequences from high-throughput sequencing reads.\" EMBnet 17(1): 10-12. 13. Dobin, A., et al., STAR: ultrafast universal RNA-seq aligner. Bioinformatics, 2013. 29(1): p. 15-21. 14. Li, B. and C.N. Dewey, RSEM: accurate transcript quantification from RNA-Seq data with or without a reference genome. BMC Bioinformatics, 2011. 12: p. 323. 15. Uhrig, S., et al. (2021). \"Accurate and efficient detection of gene fusions from RNA sequencing data\". Genome Res. 31(3): 448-460.","title":"About"},{"location":"#rna-seek","text":"An open-source, reproducible, and scalable solution for analyzing RNA-sequencing data.","title":"RNA-seek"},{"location":"#1-introduction","text":"Welcome to RNA-seek's documentation! This guide is the main source of documentation for users that are getting started with the RNA-seek pipeline . If you are not familiar with RNA-sequencing, please checkout our theory and practical guide . That section provides a conceptual overview to RNA-seq analysis and as well as a set of generalized guidelines to interpret different quality-control metrics. If you are a new user, we highly recommend reading through our getting started section. This page contains information needed to quickly build new reference files and setup the pipeline for running in your compute environment. RNA-seek is composed several inter-related sub commands to faciliate the analysis of RNA-sequencing data. For more information about each available sub command, please see the usage section . To help out new users, an example of each command is also provided. The resources page contains more information about the pipeline's default reference genomes along with every tool and Docker image the pipeline employs. For more information about issues or trouble-shooting a problem, please checkout our FAQ prior to opening an issue on Github .","title":"1. Introduction"},{"location":"#2-overview","text":"RNA-seek is a comprehensive, open-source RNA-seq pipeline that relies on technologies like Docker 1 and Singularity 2 to maintain the highest-level of reproducibility. The pipeline consists of a series of data processing and quality-control steps orchestrated by Snakemake 3 , a flexible and scalable workflow management system, to submit jobs to a cluster or cloud provider. RNA-seek can be run locally on a compute instance, on-premise using a cluster, or on the cloud using AWS. A user can define the method or mode of execution. The pipeline can submit jobs to a cluster using a job scheduler like SLURM, or run on AWS using Tibanna (feature coming soon!). A hybrid approach ensures the pipeline is accessible to all users. A bioinformatics pipeline is more than the sum of its data processing steps. A pipeline without quality-control steps provides a myopic view of the potential sources of variation within your data (i.e., biological verses technical sources of variation). RNA-seek pipeline is composed of a series of quality-control and data processing steps. Fig 1. An Overview of the Quantification and Quality-control Pipeline. Gene and isoform counts are quantified and a series of QC-checks are performed to assess the quality of the data. This pipeline stops at the generation of a raw counts matrix, which is input to the next sub-workflow. To run the pipeline, a user must select their raw data directory (i.e. the location to their FastQ files), a reference genome, and output directory (i.e. the location where the pipeline performs the analysis). Quality-control information is summarized across all samples in the MultiQC and RNA report.","title":"2. Overview"},{"location":"#3-pipeline","text":"The accuracy of the downstream interpretations made from transcriptomic data are highly dependent on initial sample library. Unwanted sources of technical variation, which if not accounted for properly, can influence the results. In addition to generating a MultiQC report, the RNA-seek pipeline also generates a rNA Report to interactively allow users to identify problematic samples prior to performing any downstream analysis. RNA-seek's comprehensive quality-control helps ensure your results are reliable and reproducible across experiments. In the data processing steps, RNA-seek quantifies gene and isoform expression and predicts gene fusions. Please note that the detection of alternative splicing events and variant calling will be incorporated in a later release.","title":"3. Pipeline"},{"location":"#31-quality-control","text":"Quality Control FastQC 4 is used to assess the sequencing quality. FastQC is run twice, before and after adapter trimming. It generates a set of basic statistics to identify problems that can arise during sequencing or library preparation. FastQC will summarize per base and per read QC metrics such as quality scores and GC content. It will also summarize the distribution of sequence lengths and will report the presence of adapter sequences. Kraken2 5 and FastQ Screen 6 are used to screen for various sources of contamination. During the process of sample collection to library preparation, there is a risk for introducing wanted sources of DNA. FastQ Screen compares your sequencing data to a set of different reference genomes to determine if there is contamination. It allows a user to see if the composition of your library matches what you expect. Also, if there are high levels of microbial contamination, Kraken can provide an estimation of the taxonomic composition. Kraken can be used in conjunction with Krona 7 to produce interactive reports. Preseq 8 is used to estimate the complexity of a library for each samples. If the duplication rate is very high, the overall library complexity will be low. Low library complexity could signal an issue with library preparation where very little input RNA was over-amplified or the sample may be degraded. Picard 9 can be used to estimate the duplication rate, and it has another particularly useful sub-command called CollectRNAseqMetrics which reports the number and percentage of reads that align to various regions: such as coding, intronic, UTR, intergenic and ribosomal regions. This is particularly useful as you would expect a library constructed with ploy(A)-selection to have a high percentage of reads that map to coding regions. Picard CollectRNAseqMetrics will also report the uniformity of coverage across all genes, which is useful for determining whether a sample has a 3' bias (observed in ploy(A)-selection libraries containing degraded RNA). RSeQC 10 is another particularity useful package that is tailored for RNA-seq data. It is used to calculate the inner distance between paired-end reads and calculate TIN values for a set of canonical protein-coding transcripts. A median TIN value is calucated for each sample, which analogous to a computationally derived RIN. MultiQC 11 is used to aggreate the results of each tool into a single interactive report.","title":"3.1 Quality Control"},{"location":"#32-data-processing","text":"Cutadapt 12 is used to remove adapter sequences, perform quality trimming, and remove very short sequences that would otherwise multi-map all over the genome prior to alignment. STAR 13 is used to align reads to the reference genome. The RNA-seek pipeline runs STAR in a two-passes where splice-junctions are collected and aggregated across all samples and provided to the second-pass of STAR. In the second pass of STAR, the splice-junctions detected in the first pass are inserted into the genome indices prior to alignment. RSEM 14 is used to quantify gene and isoform expression. The expected counts from RSEM are merged across samples to create a two counts matrices for gene counts and isoform counts. Arriba 15 is used to predict gene-fusion events. The pre-built human and mouse reference genomes use Arriba blacklists to reduce the false-positive rate.","title":"3.2 Data Processing"},{"location":"#4-contribute","text":"This site is a living document, created for and by the genomics community. RNA-seek is maintained by the developers and bioinformaticians at the NIH and is improved by feedback from external collaborators like you ! We want to make it easy for users to connect with us to share ideas, solve problems, and to continuously deliver the best pipelines. We encourage you to contribute new content and make improvements to existing content via pull request to our GitHub repository . Please checkout our project's roadmap to see our planned improvements for the next release of RNA-seek.","title":"4. Contribute"},{"location":"#5-references","text":"1. Merkel, D. (2014). Docker: lightweight linux containers for consistent development and deployment. Linux Journal, 2014(239), 2. 2. Kurtzer GM, Sochat V, Bauer MW (2017). Singularity: Scientific containers for mobility of compute. PLoS ONE 12(5): e0177459. 3. Koster, J. and S. Rahmann (2018). \"Snakemake-a scalable bioinformatics workflow engine.\" Bioinformatics 34(20): 3600. 4. Andrews, S. (2010). FastQC: a quality control tool for high throughput sequence data. 5. Wood, D. E. and S. L. Salzberg (2014). \"Kraken: ultrafast metagenomic sequence classification using exact alignments.\" Genome Biol 15(3): R46. 6. Wingett, S. and S. Andrews (2018). \"FastQ Screen: A tool for multi-genome mapping and quality control.\" F1000Research 7(2): 1338. 7. Ondov, B. D., et al. (2011). \"Interactive metagenomic visualization in a Web browser.\" BMC Bioinformatics 12(1): 385. 8. Daley, T. and A.D. Smith, Predicting the molecular complexity of sequencing libraries. Nat Methods, 2013. 10(4): p. 325-7. 9. The Picard toolkit. https://broadinstitute.github.io/picard/ . 10. Wang, L., et al. (2012). \"RSeQC: quality control of RNA-seq experiments.\" Bioinformatics 28(16): 2184-2185. 11. Ewels, P., et al. (2016). \"MultiQC: summarize analysis results for multiple tools and samples in a single report.\" Bioinformatics 32(19): 3047-3048. 12. Martin, M. (2011). \"Cutadapt removes adapter sequences from high-throughput sequencing reads.\" EMBnet 17(1): 10-12. 13. Dobin, A., et al., STAR: ultrafast universal RNA-seq aligner. Bioinformatics, 2013. 29(1): p. 15-21. 14. Li, B. and C.N. Dewey, RSEM: accurate transcript quantification from RNA-Seq data with or without a reference genome. BMC Bioinformatics, 2011. 12: p. 323. 15. Uhrig, S., et al. (2021). \"Accurate and efficient detection of gene fusions from RNA sequencing data\". Genome Res. 31(3): 448-460.","title":"5. References"},{"location":"general-questions/","text":"If you are experiencing an issue, please read through this list first before contacting our team. We have compiled this FAQ from the most common questions. If you have a question that is not on this page, please feel free to reach out to our team . Contribute \u00b6 Q. I would like to contribute to RNA-seek. How do I get involved? A. There are several ways you can get involved with the project. If you have added new features or adding new changes, please consider contributing them back to the original repository: Fork the original repo to a personal or org account. Clone the fork to your local filesystem. Copy the modified files to the cloned fork. Commit and push your changes to your fork. Create a pull request to this repository. If you would like to create or tackle an issue, please reference our issue tracker on Github. Also, feel free to like or the project on Github! Additional Support \u00b6 Q. I have a few questions about the pipeline. How can I reach you? A. For general questions and/or support, please free to open an issue on Github.","title":"General Questions"},{"location":"general-questions/#contribute","text":"Q. I would like to contribute to RNA-seek. How do I get involved? A. There are several ways you can get involved with the project. If you have added new features or adding new changes, please consider contributing them back to the original repository: Fork the original repo to a personal or org account. Clone the fork to your local filesystem. Copy the modified files to the cloned fork. Commit and push your changes to your fork. Create a pull request to this repository. If you would like to create or tackle an issue, please reference our issue tracker on Github. Also, feel free to like or the project on Github!","title":"Contribute"},{"location":"general-questions/#additional-support","text":"Q. I have a few questions about the pipeline. How can I reach you? A. For general questions and/or support, please free to open an issue on Github.","title":"Additional Support"},{"location":"license/","text":"MIT License \u00b6 Copyright \u00a9 2020 CCBR Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"license/#mit-license","text":"Copyright \u00a9 2020 CCBR Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"MIT License"},{"location":"troubleshooting/","text":"If you are experiencing an issue, please read through this list first before contacting our team. We have compiled this FAQ from the most common problems. If you are running into an issue that is not on this page, please feel free to reach out to our team . Job Status \u00b6 Q. How do I know if RNA-seek finished running successfully? A. There are several different ways of checking the status of each job submitted to the cluster. Here are a few suggestions: Check Job Status Biowulf Dashboard You can check the status of Biowulf jobs through the your user dashboard . Each job that RNA-seek submits to the cluster starts with the pl: prefix. Snakemake Log Snakemake generates the following file, Reports/snakemake.log , in each pipeline's working directory. This file contains information about each job submitted to the job scheduler. If there are no problems, snakemake will report 100% steps done in those last few lines of the file. You can take a peek of the end of the file by running the following command: tail -n30 Reports/snakemake.log Or more specifically, you can pull out the timestamps of the last few completed jobs like this: grep -A 1 done Reports/snakemake.log | tail Query Job Scheduler SLURM has built-in commands that allow a user to view the status of jobs submitted to the cluster. Method 1: To see what jobs you have running, run the following command: squeue -u $USER Method 2 You can also run this alternative command to check the status of your running jobs: sjobs Each job that RNA-seek submits to the cluster starts with the pl: prefix. Q. How do I identify failed jobs? A. If there are errors, you'll need to identify which jobs failed and check its corresponding SLURM output file. The SLURM output file may contain a clue as to why the job failed. Find Failed Jobs SLURM output files Quick and dirty method to search for failed jobs by looking through each job's output file: grep -i 'fail' slurmfiles/slurm-*.out Snakemake Log Bash script identify the SLURM ID of the first failed job and check if the output file exists. Many failures are caused by filesystem or network issues on Biowulf, and in such cases, simply re-starting the Pipeline should resolve the issue. Snakemake will dynamically determine which steps have been completed, and which steps still need to be run. If you are still running into problems after re-running the pipeline, there may be another issue. If that is the case, please feel free to contact us . Q. How do I cancel ongoing RNA-seek jobs? A. Sometimes, you might need to manually stop a RNA-seek run prematurely, perhaps because the run was configured incorrectly or if a job is stalled. Although the walltime limits will eventually stop the workflow, this can take up to 5 or 10 days depending on the pipeline. To stop RNA-seek jobs that are currently running, you can follow these options. Cancel running jobs Master Job You can use the sjobs tool provided by Biowulf to monitor ongoing jobs. Examine the NAME column of the sjobs output, one of them should match pl:rna-seek . This is the \"primary\" job that orchestrates the submission of child jobs as the pipeline completes. Terminating this job will ensure that the pipeline is cancelled; however, you will likely need to unlock the working directory before re-running rna-seek again. Please see our instructions below in Error: Directory cannot be locked for how to unlock a working directory. You can manually cancel the primary job using scancel . However, secondary jobs that are already running will continue to completion (or failure). To stop them immediately, you will need to run scancel individually for each secondary job. See the next tab for a bash script that tries to automate this process. Child Jobs When there are lots of secondary jobs running, or if you have multiple RNA-seek runs ongoing simultaneously, it's not feasible to manually cancel jobs based on the sjobs output (see previous tab). We provide a script that will parse the snakemake log file and cancel all jobs listed within. ## Download the script (to the current directory) wget https://raw.githubusercontent.com/CCBR/Tools/master/Biowulf/cancel_snakemake_jobs.sh ## Run the script bash cancel_snakemake_jobs.sh /path/to/output/logfiles/snakemake.log The script accepts one argument, which should be the path to the snakemake log file. This will work for any log output from Snakemake. This script will NOT cancel the primary job, which you will still have to identify and cancel manually, as described in the previous tab. Once you've ensured that all running jobs have been stopped, you need to unlock the working directory (see below), and re-run rna-seek to resume the pipeline. Job Errors \u00b6 Q. Why am I getting sbatch: command not found error ? A. Are you running the rna-seek on helix.nih.gov by mistake. Helix does not have a job scheduler. One may be able to fire up the singularity module, initial working directory and perform dry-run on helix . But to submit jobs, you need to log into biowulf using ssh -Y username@biowulf.nih.gov . Q. Why am I getting a message saying Error: Directory cannot be locked. ... when I do the dry-run? A. This is caused when a run is stopped prematurely, either accidentally or on purpose, or the pipeline is still running in your working directory. Snakemake will lock a working directory to prevent two concurrent pipelines from writing to the same location. This can be remedied easily by running rna-seek unlock sub command. Please check to see if the pipeline is still running prior to running the commands below. If you would like to cancel a submitted or running pipeline, please reference the instructions above. # Load Dependencies modue load singularity snakemake # Unlock the working directory rna-seek unlock --output /path/to/working/dir Q. Why am I getting a message saying MissingInputException in line ... when I do the dry-run? A. This error usually occurs when snakemake is terminated ungracefully. Did you forcefully cancel a running pipeline? Or did one of your running pipelines abruptly end? Either way, the solution is straight-forward. Please go to your pipeline's output directory, and rename or delete the following hidden directory: .snakemake/ . This directory contains metadata pertaining any snakemake runs inside that working directory. Sometimes when a pipeline is pre-maturely or forcefully terminated, a few files related to tracking temp() files are not deleted and snakemake raises a MissingInputException. # Navigate to working directory cd /path/to/working/dir # Rename .snakemake directory to something else # And try re-dry running the pipeline mv .snakemake .old_snakemake","title":"Troubleshooting"},{"location":"troubleshooting/#job-status","text":"Q. How do I know if RNA-seek finished running successfully? A. There are several different ways of checking the status of each job submitted to the cluster. Here are a few suggestions: Check Job Status Biowulf Dashboard You can check the status of Biowulf jobs through the your user dashboard . Each job that RNA-seek submits to the cluster starts with the pl: prefix. Snakemake Log Snakemake generates the following file, Reports/snakemake.log , in each pipeline's working directory. This file contains information about each job submitted to the job scheduler. If there are no problems, snakemake will report 100% steps done in those last few lines of the file. You can take a peek of the end of the file by running the following command: tail -n30 Reports/snakemake.log Or more specifically, you can pull out the timestamps of the last few completed jobs like this: grep -A 1 done Reports/snakemake.log | tail Query Job Scheduler SLURM has built-in commands that allow a user to view the status of jobs submitted to the cluster. Method 1: To see what jobs you have running, run the following command: squeue -u $USER Method 2 You can also run this alternative command to check the status of your running jobs: sjobs Each job that RNA-seek submits to the cluster starts with the pl: prefix. Q. How do I identify failed jobs? A. If there are errors, you'll need to identify which jobs failed and check its corresponding SLURM output file. The SLURM output file may contain a clue as to why the job failed. Find Failed Jobs SLURM output files Quick and dirty method to search for failed jobs by looking through each job's output file: grep -i 'fail' slurmfiles/slurm-*.out Snakemake Log Bash script identify the SLURM ID of the first failed job and check if the output file exists. Many failures are caused by filesystem or network issues on Biowulf, and in such cases, simply re-starting the Pipeline should resolve the issue. Snakemake will dynamically determine which steps have been completed, and which steps still need to be run. If you are still running into problems after re-running the pipeline, there may be another issue. If that is the case, please feel free to contact us . Q. How do I cancel ongoing RNA-seek jobs? A. Sometimes, you might need to manually stop a RNA-seek run prematurely, perhaps because the run was configured incorrectly or if a job is stalled. Although the walltime limits will eventually stop the workflow, this can take up to 5 or 10 days depending on the pipeline. To stop RNA-seek jobs that are currently running, you can follow these options. Cancel running jobs Master Job You can use the sjobs tool provided by Biowulf to monitor ongoing jobs. Examine the NAME column of the sjobs output, one of them should match pl:rna-seek . This is the \"primary\" job that orchestrates the submission of child jobs as the pipeline completes. Terminating this job will ensure that the pipeline is cancelled; however, you will likely need to unlock the working directory before re-running rna-seek again. Please see our instructions below in Error: Directory cannot be locked for how to unlock a working directory. You can manually cancel the primary job using scancel . However, secondary jobs that are already running will continue to completion (or failure). To stop them immediately, you will need to run scancel individually for each secondary job. See the next tab for a bash script that tries to automate this process. Child Jobs When there are lots of secondary jobs running, or if you have multiple RNA-seek runs ongoing simultaneously, it's not feasible to manually cancel jobs based on the sjobs output (see previous tab). We provide a script that will parse the snakemake log file and cancel all jobs listed within. ## Download the script (to the current directory) wget https://raw.githubusercontent.com/CCBR/Tools/master/Biowulf/cancel_snakemake_jobs.sh ## Run the script bash cancel_snakemake_jobs.sh /path/to/output/logfiles/snakemake.log The script accepts one argument, which should be the path to the snakemake log file. This will work for any log output from Snakemake. This script will NOT cancel the primary job, which you will still have to identify and cancel manually, as described in the previous tab. Once you've ensured that all running jobs have been stopped, you need to unlock the working directory (see below), and re-run rna-seek to resume the pipeline.","title":"Job Status"},{"location":"troubleshooting/#job-errors","text":"Q. Why am I getting sbatch: command not found error ? A. Are you running the rna-seek on helix.nih.gov by mistake. Helix does not have a job scheduler. One may be able to fire up the singularity module, initial working directory and perform dry-run on helix . But to submit jobs, you need to log into biowulf using ssh -Y username@biowulf.nih.gov . Q. Why am I getting a message saying Error: Directory cannot be locked. ... when I do the dry-run? A. This is caused when a run is stopped prematurely, either accidentally or on purpose, or the pipeline is still running in your working directory. Snakemake will lock a working directory to prevent two concurrent pipelines from writing to the same location. This can be remedied easily by running rna-seek unlock sub command. Please check to see if the pipeline is still running prior to running the commands below. If you would like to cancel a submitted or running pipeline, please reference the instructions above. # Load Dependencies modue load singularity snakemake # Unlock the working directory rna-seek unlock --output /path/to/working/dir Q. Why am I getting a message saying MissingInputException in line ... when I do the dry-run? A. This error usually occurs when snakemake is terminated ungracefully. Did you forcefully cancel a running pipeline? Or did one of your running pipelines abruptly end? Either way, the solution is straight-forward. Please go to your pipeline's output directory, and rename or delete the following hidden directory: .snakemake/ . This directory contains metadata pertaining any snakemake runs inside that working directory. Sometimes when a pipeline is pre-maturely or forcefully terminated, a few files related to tracking temp() files are not deleted and snakemake raises a MissingInputException. # Navigate to working directory cd /path/to/working/dir # Rename .snakemake directory to something else # And try re-dry running the pipeline mv .snakemake .old_snakemake","title":"Job Errors"},{"location":"RNA-seq/Resources/","text":"1. Reference genomes \u00b6 On Biowulf , RNA-seek comes bundled with the following pre-built GENCODE 1 reference genomes: Genome Species Annotation Version Notes hg38_48 Homo sapiens (human, latest) Gencode Release v48 GRCh38 , Annotation Release date: 08/2024 hg38_30 Homo sapiens (human, hidden) Gencode Release v30 GRCh38 , Annotation Release date: 11/2018 mm39_M37 Mus musculus (mouse, latest) Gencode Release M37 GRCm38 , Annotation Release date: 08/2024 mm10_M25 Mus musculus (mouse) Gencode Release M25 GRCm38 , Annotation Release date: 11/2019 mm10_M21 Mus musculus (mouse, hidden) Gencode Release M21 GRCm38 , Annotation Release date: 04/2019 However, building new reference genomes is easy! If you do not have access to Biowulf or you are looking for a reference genome and/or annotation that is currently not available , it can be built with RNA-seek's build sub-command. Given a genomic FASTA file (ref.fa) and a GTF file (genes.gtf), rna-seek build will create all of the required reference files to run the RNA-seek pipeline. Once the build pipeline completes, you can supply the newly generated reference.json to the --genome of rna-seek run . For more information, please see the help page for the run and build sub commands. 2. Tools and versions \u00b6 Raw data > Adapter Trimming > Alignment > Quantification (genes and isoforms, gene-fusions) Tool Version Docker Notes FastQC 2 0.11.9 nciccbr/ccbr_fastqc_0.11.9 Quality-control step to assess sequencing quality, run before and after adapter trimming Cutadapt 3 1.18 nciccbr/ccbr_cutadapt_1.18 Data processing step to remove adapter sequences and perform quality trimming Kraken 4 2.1.1 nciccbr/ccbr_kraken_v2.1.1 Quality-control step to assess microbial taxonomic composition KronaTools 5 2.7.1 nciccbr/ccbr_kraken_v2.1.1 Quality-control step to visualize kraken output FastQ Screen 6 0.13.0 nciccbr/ccbr_fastq_screen_0.13.0 Quality-control step to assess contamination; additional dependencies: bowtie2/2.3.4 , perl/5.24.3 STAR 7 2.7.6a nciccbr/ccbr_arriba_2.0.0 Data processing step to align reads against reference genome (using its two-pass mode) bbtools 8 38.87 nciccbr/ccbr_bbtools_38.87 Quality-control step to calculate insert_size of assembled reads pairs with bbmerge QualiMap 9 2.2.1 nciccbr/ccbr_qualimap Quality-control step to assess various alignment metrics Picard 10 2.18.20 nciccbr/ccbr_picard Quality-control step to run MarkDuplicates , CollectRnaSeqMetrics and AddOrReplaceReadGroups Preseq 11 2.0.3 nciccbr/ccbr_preseq Quality-control step to estimate library complexity SAMtools 12 1.7 nciccbr/ccbr_arriba_2.0.0 Quality-control step to run flagstat to calculate alignment statistics bam2strandedbw custom nciccbr/ccbr_bam2strandedbw Summarization step to convert STAR aligned PE bam file into forward and reverse strand bigwigs suitable for a genomic track viewer like IGV RSeQC 13 4.0.0 nciccbr/ccbr_rseqc_4.0.0 Quality-control step to infer stranded-ness and read distributions over specific genomic features RSEM 14 1.3.3 nciccbr/ccbr_rsem_1.3.3 Data processing step to quantify gene and isoform counts Arriba 15 2.0.0 nciccbr/ccbr_arriba_2.0.0 Data processing step to quantify gene-fusions RNA Report custom nciccbr/ccbr_rna Summarization step to identify outliers and assess techincal sources of variation MultiQC 16 1.12 skchronicles/multiqc Reporting step to aggregate sample statistics and quality-control information across all sample 3. Acknowledgements \u00b6 3.1 Biowulf \u00b6 If you utilized NIH's Biowulf cluster to run RNA-seek, please do not forget to provide an acknowlegement ! The continued growth and support of NIH's Biowulf cluster is dependent upon its demonstrable value to the NIH Intramural Research Program. If you publish research that involved significant use of Biowulf, please cite the cluster. Suggested citation text: This work utilized the computational resources of the NIH HPC Biowulf cluster. (http://hpc.nih.gov) 4. References \u00b6 1. Harrow, J., et al., GENCODE: the reference human genome annotation for The ENCODE Project. Genome Res, 2012. 22(9): p. 1760-74. 2. Andrews, S. (2010). FastQC: a quality control tool for high throughput sequence data. 3. Martin, M. (2011). \"Cutadapt removes adapter sequences from high-throughput sequencing reads.\" EMBnet 17(1): 10-12. 4. Wood, D. E. and S. L. Salzberg (2014). \"Kraken: ultrafast metagenomic sequence classification using exact alignments.\" Genome Biol 15(3): R46. 5. Ondov, B. D., et al. (2011). \"Interactive metagenomic visualization in a Web browser.\" BMC Bioinformatics 12(1): 385. 6. Wingett, S. and S. Andrews (2018). \"FastQ Screen: A tool for multi-genome mapping and quality control.\" F1000Research 7(2): 1338. 7. Dobin, A., et al., STAR: ultrafast universal RNA-seq aligner. Bioinformatics, 2013. 29(1): p. 15-21. 8. Bushnell, B., Rood, J., & Singer, E. (2017). BBMerge - Accurate paired shotgun read merging via overlap. PloS one, 12(10), e0185056. 9. Okonechnikov, K., et al. (2015). \"Qualimap 2: advanced multi-sample quality control for high-throughput sequencing data.\" Bioinformatics 32(2): 292-294. 10. The Picard toolkit. https://broadinstitute.github.io/picard/ . 11. Daley, T. and A.D. Smith, Predicting the molecular complexity of sequencing libraries. Nat Methods, 2013. 10(4): p. 325-7. 12. Li, H., et al. (2009). \"The Sequence Alignment/Map format and SAMtools.\" Bioinformatics 25(16): 2078-2079. 13. Wang, L., et al. (2012). \"RSeQC: quality control of RNA-seq experiments.\" Bioinformatics 28(16): 2184-2185. 14. Li, B. and C.N. Dewey, RSEM: accurate transcript quantification from RNA-Seq data with or without a reference genome. BMC Bioinformatics, 2011. 12: p. 323. 15. Uhrig, S., et al. (2021). \"Accurate and efficient detection of gene fusions from RNA sequencing data\". Genome Res. 31(3): 448-460. 16. Ewels, P., et al. (2016). \"MultiQC: summarize analysis results for multiple tools and samples in a single report.\" Bioinformatics 32(19): 3047-3048.","title":"Resources"},{"location":"RNA-seq/Resources/#1-reference-genomes","text":"On Biowulf , RNA-seek comes bundled with the following pre-built GENCODE 1 reference genomes: Genome Species Annotation Version Notes hg38_48 Homo sapiens (human, latest) Gencode Release v48 GRCh38 , Annotation Release date: 08/2024 hg38_30 Homo sapiens (human, hidden) Gencode Release v30 GRCh38 , Annotation Release date: 11/2018 mm39_M37 Mus musculus (mouse, latest) Gencode Release M37 GRCm38 , Annotation Release date: 08/2024 mm10_M25 Mus musculus (mouse) Gencode Release M25 GRCm38 , Annotation Release date: 11/2019 mm10_M21 Mus musculus (mouse, hidden) Gencode Release M21 GRCm38 , Annotation Release date: 04/2019 However, building new reference genomes is easy! If you do not have access to Biowulf or you are looking for a reference genome and/or annotation that is currently not available , it can be built with RNA-seek's build sub-command. Given a genomic FASTA file (ref.fa) and a GTF file (genes.gtf), rna-seek build will create all of the required reference files to run the RNA-seek pipeline. Once the build pipeline completes, you can supply the newly generated reference.json to the --genome of rna-seek run . For more information, please see the help page for the run and build sub commands.","title":"1. Reference genomes"},{"location":"RNA-seq/Resources/#2-tools-and-versions","text":"Raw data > Adapter Trimming > Alignment > Quantification (genes and isoforms, gene-fusions) Tool Version Docker Notes FastQC 2 0.11.9 nciccbr/ccbr_fastqc_0.11.9 Quality-control step to assess sequencing quality, run before and after adapter trimming Cutadapt 3 1.18 nciccbr/ccbr_cutadapt_1.18 Data processing step to remove adapter sequences and perform quality trimming Kraken 4 2.1.1 nciccbr/ccbr_kraken_v2.1.1 Quality-control step to assess microbial taxonomic composition KronaTools 5 2.7.1 nciccbr/ccbr_kraken_v2.1.1 Quality-control step to visualize kraken output FastQ Screen 6 0.13.0 nciccbr/ccbr_fastq_screen_0.13.0 Quality-control step to assess contamination; additional dependencies: bowtie2/2.3.4 , perl/5.24.3 STAR 7 2.7.6a nciccbr/ccbr_arriba_2.0.0 Data processing step to align reads against reference genome (using its two-pass mode) bbtools 8 38.87 nciccbr/ccbr_bbtools_38.87 Quality-control step to calculate insert_size of assembled reads pairs with bbmerge QualiMap 9 2.2.1 nciccbr/ccbr_qualimap Quality-control step to assess various alignment metrics Picard 10 2.18.20 nciccbr/ccbr_picard Quality-control step to run MarkDuplicates , CollectRnaSeqMetrics and AddOrReplaceReadGroups Preseq 11 2.0.3 nciccbr/ccbr_preseq Quality-control step to estimate library complexity SAMtools 12 1.7 nciccbr/ccbr_arriba_2.0.0 Quality-control step to run flagstat to calculate alignment statistics bam2strandedbw custom nciccbr/ccbr_bam2strandedbw Summarization step to convert STAR aligned PE bam file into forward and reverse strand bigwigs suitable for a genomic track viewer like IGV RSeQC 13 4.0.0 nciccbr/ccbr_rseqc_4.0.0 Quality-control step to infer stranded-ness and read distributions over specific genomic features RSEM 14 1.3.3 nciccbr/ccbr_rsem_1.3.3 Data processing step to quantify gene and isoform counts Arriba 15 2.0.0 nciccbr/ccbr_arriba_2.0.0 Data processing step to quantify gene-fusions RNA Report custom nciccbr/ccbr_rna Summarization step to identify outliers and assess techincal sources of variation MultiQC 16 1.12 skchronicles/multiqc Reporting step to aggregate sample statistics and quality-control information across all sample","title":"2. Tools and versions"},{"location":"RNA-seq/Resources/#3-acknowledgements","text":"","title":"3. Acknowledgements"},{"location":"RNA-seq/Resources/#31-biowulf","text":"If you utilized NIH's Biowulf cluster to run RNA-seek, please do not forget to provide an acknowlegement ! The continued growth and support of NIH's Biowulf cluster is dependent upon its demonstrable value to the NIH Intramural Research Program. If you publish research that involved significant use of Biowulf, please cite the cluster. Suggested citation text: This work utilized the computational resources of the NIH HPC Biowulf cluster. (http://hpc.nih.gov)","title":"3.1 Biowulf"},{"location":"RNA-seq/Resources/#4-references","text":"1. Harrow, J., et al., GENCODE: the reference human genome annotation for The ENCODE Project. Genome Res, 2012. 22(9): p. 1760-74. 2. Andrews, S. (2010). FastQC: a quality control tool for high throughput sequence data. 3. Martin, M. (2011). \"Cutadapt removes adapter sequences from high-throughput sequencing reads.\" EMBnet 17(1): 10-12. 4. Wood, D. E. and S. L. Salzberg (2014). \"Kraken: ultrafast metagenomic sequence classification using exact alignments.\" Genome Biol 15(3): R46. 5. Ondov, B. D., et al. (2011). \"Interactive metagenomic visualization in a Web browser.\" BMC Bioinformatics 12(1): 385. 6. Wingett, S. and S. Andrews (2018). \"FastQ Screen: A tool for multi-genome mapping and quality control.\" F1000Research 7(2): 1338. 7. Dobin, A., et al., STAR: ultrafast universal RNA-seq aligner. Bioinformatics, 2013. 29(1): p. 15-21. 8. Bushnell, B., Rood, J., & Singer, E. (2017). BBMerge - Accurate paired shotgun read merging via overlap. PloS one, 12(10), e0185056. 9. Okonechnikov, K., et al. (2015). \"Qualimap 2: advanced multi-sample quality control for high-throughput sequencing data.\" Bioinformatics 32(2): 292-294. 10. The Picard toolkit. https://broadinstitute.github.io/picard/ . 11. Daley, T. and A.D. Smith, Predicting the molecular complexity of sequencing libraries. Nat Methods, 2013. 10(4): p. 325-7. 12. Li, H., et al. (2009). \"The Sequence Alignment/Map format and SAMtools.\" Bioinformatics 25(16): 2078-2079. 13. Wang, L., et al. (2012). \"RSeQC: quality control of RNA-seq experiments.\" Bioinformatics 28(16): 2184-2185. 14. Li, B. and C.N. Dewey, RSEM: accurate transcript quantification from RNA-Seq data with or without a reference genome. BMC Bioinformatics, 2011. 12: p. 323. 15. Uhrig, S., et al. (2021). \"Accurate and efficient detection of gene fusions from RNA sequencing data\". Genome Res. 31(3): 448-460. 16. Ewels, P., et al. (2016). \"MultiQC: summarize analysis results for multiple tools and samples in a single report.\" Bioinformatics 32(19): 3047-3048.","title":"4. References"},{"location":"RNA-seq/TLDR-RNA-seq/","text":"1. Introduction \u00b6 When processing RNA-sequencing data, there are often many steps that we must repeat. These are usually steps like removing adapter sequences, aligning reads against a reference genome, checking the quality of the data, and quantifying counts. RNA-seek is composed of several sub commands or convience functions to automate these repetitive steps. With RNA-seek, you can run your samples through our highly-reproducible pipeline, build resources for new reference genomes, and more! Here is a list of available rna-seek sub commands : run : run the rna-seq pipeline build : build reference files cache : cache remote resources locally unlock : unlock a working directory This page contains information for building reference files and running the RNA-seek pipeline. For more information about each of the available sub commands, please see the usage section . 2. Setup RNA-seek \u00b6 Estimated Reading Time: 3 Mintutes RNA-seek has two dependencies: singularity and snakemake . These dependencies can be installed by a sysadmin; however, snakemake is readily available through conda. Before running the pipeline or any of the commands below, please ensure singularity and snakemake are in your $PATH . Please see follow the instructions below for getting started with the RNA-seek pipeline. 2.1 Login to cluster \u00b6 # Setup Step 0.) ssh into cluster's head node # example below for Biowulf cluster ssh -Y $USER @biowulf.nih.gov 2.2 Grab an interactive node \u00b6 # Setup Step 1.) Please do not run RNA-seek on the head node! # Grab an interactive node first srun -N 1 -n 1 --time = 12 :00:00 -p interactive --mem = 8gb --cpus-per-task = 4 --pty bash 2.3 Load dependecies \u00b6 # Setup Step 2.) Add singularity and snakemake executables to $PATH module purge module load singularity snakemake # Setup Step 3.) Download RNA-seek and add to $PATH # Clone the RNA-seek repository from Github git clone https://github.com/skchronicles/RNA-seek.git export PATH = ${ PWD } /RNA-seek: ${ PATH } 3. Building Reference files \u00b6 In this example, we will start off by building reference files downloaded from GENCODE . We recommend downloading the PRI Genome FASTA file and annotation from GENCODE . These PRI reference files contain the primary chromosomes and scaffolds. We do not recommend downloading the CHR reference files! Here is more information about GENCODE's v36 release for the human reference genome. 3.1 Download References from GENCODE \u00b6 # Build Step 0.) Please do not run RNA-seek on the head node! # Grab an interactive node first # Assumes that you have already ssh-ed into cluster srun -N 1 -n 1 --time = 12 :00:00 -p interactive --mem = 8gb --cpus-per-task = 4 --pty bash # Build Step 1.) Download the PRI Genome FASTA file for GRCh38.p13 wget ftp://ftp.ebi.ac.uk/pub/databases/gencode/Gencode_human/release_36/GRCh38.primary_assembly.genome.fa.gz gzip -d GRCh38.primary_assembly.genome.fa.gz # Build Step 2.) Download the PRI release 36 annotation wget ftp://ftp.ebi.ac.uk/pub/databases/gencode/Gencode_human/release_36/gencode.v36.primary_assembly.annotation.gtf.gz gzip -d gencode.v36.primary_assembly.annotation.gtf.gz 3.2 Run Build pipeline \u00b6 # Build Step 3.) Load dependencies module purge module load singularity snakemake # Build Step 4.) Dry-run the build pipeline rna-seek build --ref-fa GRCh38.primary_assembly.genome.fa \\ --ref-name hg38 \\ --ref-gtf gencode.v36.primary_assembly.annotation.gtf \\ --gtf-ver 36 --output /data/ $USER /hg38_36 --dry-run # Build Step 5.) Submit the build pipeline to cluster rna-seek build --ref-fa GRCh38.primary_assembly.genome.fa \\ --ref-name hg38 \\ --ref-gtf gencode.v36.primary_assembly.annotation.gtf \\ --gtf-ver 36 --output /data/ $USER /hg38_36 An email notification will be sent out when the pipeline starts and ends. Once the build pipeline completes, you can run RNA-seek with the provided test dataset. Please see the intructions below for more information. 4. Running RNA-seek \u00b6 Run RNA-seek with the reference files we built above using hg38 (GRCh38.p13) Genome FASTA file and GENCODE release 36 annotation (GTF). For more information about how the reference files we generated, please see the intructions above. You can use those instructions as a guide for building any new reference genomes in the future. 4.1 Dry-run pipeline \u00b6 Dry-run the pipeline prior to submiting the pipeline's master job. Please note that if you wish to run RNA-seek with a new dataset, you will only need to update the values provided to the --input and --output arguments (and maybe --genome ). The --input argument supports globbing. If this is the first time running RNA-seek with for given dataset, the --output directory should not exist on your local filesystem. It will be created automatically during runtime. # Run Step 0.) Please do not run RNA-seek on the head node! # Grab an interactive node first # Assumes that you have already ssh-ed into cluster srun -N 1 -n 1 --time = 12 :00:00 -p interactive --mem = 8gb --cpus-per-task = 4 --pty bash # Run Step 1.) Load dependencies module purge module load singularity snakemake # Run Step 2.) Dry-run the pipeline with test dataset # And reference genome generated in the steps above # Test data consists of sub sampled FastQ files rna-seek run \\ --input RNA-seek/.tests/*.R?.fastq.gz \\ --output /data/ ${ USER } /runner_hg38_36/ \\ --genome /data/ ${ USER } /hg38_36/hg38_36.json \\ --mode slurm \\ --star-2-pass-basic \\ --dry-run 4.2 Run pipeline \u00b6 Kick off the pipeline by submiting the master job to the cluster. It is essentially the same command above without the --dry-run flag. # Run Step 3.) Submit the master job # Runs the RNA-seek pipeline with the # reference genome generated in the steps above # and with the test dataset rna-seek run \\ --input RNA-seek/.tests/*.R?.fastq.gz \\ --output /data/ ${ USER } /runner_hg38_36/ \\ --genome /data/ ${ USER } /hg38_36/hg38_36.json \\ --mode slurm \\ --star-2-pass-basic \\ --dry-run An email notification will be sent out when the pipeline starts and ends.","title":"Getting started"},{"location":"RNA-seq/TLDR-RNA-seq/#1-introduction","text":"When processing RNA-sequencing data, there are often many steps that we must repeat. These are usually steps like removing adapter sequences, aligning reads against a reference genome, checking the quality of the data, and quantifying counts. RNA-seek is composed of several sub commands or convience functions to automate these repetitive steps. With RNA-seek, you can run your samples through our highly-reproducible pipeline, build resources for new reference genomes, and more! Here is a list of available rna-seek sub commands : run : run the rna-seq pipeline build : build reference files cache : cache remote resources locally unlock : unlock a working directory This page contains information for building reference files and running the RNA-seek pipeline. For more information about each of the available sub commands, please see the usage section .","title":"1. Introduction"},{"location":"RNA-seq/TLDR-RNA-seq/#2-setup-rna-seek","text":"Estimated Reading Time: 3 Mintutes RNA-seek has two dependencies: singularity and snakemake . These dependencies can be installed by a sysadmin; however, snakemake is readily available through conda. Before running the pipeline or any of the commands below, please ensure singularity and snakemake are in your $PATH . Please see follow the instructions below for getting started with the RNA-seek pipeline.","title":"2. Setup RNA-seek"},{"location":"RNA-seq/TLDR-RNA-seq/#21-login-to-cluster","text":"# Setup Step 0.) ssh into cluster's head node # example below for Biowulf cluster ssh -Y $USER @biowulf.nih.gov","title":"2.1 Login to cluster"},{"location":"RNA-seq/TLDR-RNA-seq/#22-grab-an-interactive-node","text":"# Setup Step 1.) Please do not run RNA-seek on the head node! # Grab an interactive node first srun -N 1 -n 1 --time = 12 :00:00 -p interactive --mem = 8gb --cpus-per-task = 4 --pty bash","title":"2.2 Grab an interactive node"},{"location":"RNA-seq/TLDR-RNA-seq/#23-load-dependecies","text":"# Setup Step 2.) Add singularity and snakemake executables to $PATH module purge module load singularity snakemake # Setup Step 3.) Download RNA-seek and add to $PATH # Clone the RNA-seek repository from Github git clone https://github.com/skchronicles/RNA-seek.git export PATH = ${ PWD } /RNA-seek: ${ PATH }","title":"2.3 Load dependecies"},{"location":"RNA-seq/TLDR-RNA-seq/#3-building-reference-files","text":"In this example, we will start off by building reference files downloaded from GENCODE . We recommend downloading the PRI Genome FASTA file and annotation from GENCODE . These PRI reference files contain the primary chromosomes and scaffolds. We do not recommend downloading the CHR reference files! Here is more information about GENCODE's v36 release for the human reference genome.","title":"3. Building Reference files"},{"location":"RNA-seq/TLDR-RNA-seq/#31-download-references-from-gencode","text":"# Build Step 0.) Please do not run RNA-seek on the head node! # Grab an interactive node first # Assumes that you have already ssh-ed into cluster srun -N 1 -n 1 --time = 12 :00:00 -p interactive --mem = 8gb --cpus-per-task = 4 --pty bash # Build Step 1.) Download the PRI Genome FASTA file for GRCh38.p13 wget ftp://ftp.ebi.ac.uk/pub/databases/gencode/Gencode_human/release_36/GRCh38.primary_assembly.genome.fa.gz gzip -d GRCh38.primary_assembly.genome.fa.gz # Build Step 2.) Download the PRI release 36 annotation wget ftp://ftp.ebi.ac.uk/pub/databases/gencode/Gencode_human/release_36/gencode.v36.primary_assembly.annotation.gtf.gz gzip -d gencode.v36.primary_assembly.annotation.gtf.gz","title":"3.1 Download References from GENCODE"},{"location":"RNA-seq/TLDR-RNA-seq/#32-run-build-pipeline","text":"# Build Step 3.) Load dependencies module purge module load singularity snakemake # Build Step 4.) Dry-run the build pipeline rna-seek build --ref-fa GRCh38.primary_assembly.genome.fa \\ --ref-name hg38 \\ --ref-gtf gencode.v36.primary_assembly.annotation.gtf \\ --gtf-ver 36 --output /data/ $USER /hg38_36 --dry-run # Build Step 5.) Submit the build pipeline to cluster rna-seek build --ref-fa GRCh38.primary_assembly.genome.fa \\ --ref-name hg38 \\ --ref-gtf gencode.v36.primary_assembly.annotation.gtf \\ --gtf-ver 36 --output /data/ $USER /hg38_36 An email notification will be sent out when the pipeline starts and ends. Once the build pipeline completes, you can run RNA-seek with the provided test dataset. Please see the intructions below for more information.","title":"3.2 Run Build pipeline"},{"location":"RNA-seq/TLDR-RNA-seq/#4-running-rna-seek","text":"Run RNA-seek with the reference files we built above using hg38 (GRCh38.p13) Genome FASTA file and GENCODE release 36 annotation (GTF). For more information about how the reference files we generated, please see the intructions above. You can use those instructions as a guide for building any new reference genomes in the future.","title":"4. Running RNA-seek"},{"location":"RNA-seq/TLDR-RNA-seq/#41-dry-run-pipeline","text":"Dry-run the pipeline prior to submiting the pipeline's master job. Please note that if you wish to run RNA-seek with a new dataset, you will only need to update the values provided to the --input and --output arguments (and maybe --genome ). The --input argument supports globbing. If this is the first time running RNA-seek with for given dataset, the --output directory should not exist on your local filesystem. It will be created automatically during runtime. # Run Step 0.) Please do not run RNA-seek on the head node! # Grab an interactive node first # Assumes that you have already ssh-ed into cluster srun -N 1 -n 1 --time = 12 :00:00 -p interactive --mem = 8gb --cpus-per-task = 4 --pty bash # Run Step 1.) Load dependencies module purge module load singularity snakemake # Run Step 2.) Dry-run the pipeline with test dataset # And reference genome generated in the steps above # Test data consists of sub sampled FastQ files rna-seek run \\ --input RNA-seek/.tests/*.R?.fastq.gz \\ --output /data/ ${ USER } /runner_hg38_36/ \\ --genome /data/ ${ USER } /hg38_36/hg38_36.json \\ --mode slurm \\ --star-2-pass-basic \\ --dry-run","title":"4.1 Dry-run pipeline"},{"location":"RNA-seq/TLDR-RNA-seq/#42-run-pipeline","text":"Kick off the pipeline by submiting the master job to the cluster. It is essentially the same command above without the --dry-run flag. # Run Step 3.) Submit the master job # Runs the RNA-seek pipeline with the # reference genome generated in the steps above # and with the test dataset rna-seek run \\ --input RNA-seek/.tests/*.R?.fastq.gz \\ --output /data/ ${ USER } /runner_hg38_36/ \\ --genome /data/ ${ USER } /hg38_36/hg38_36.json \\ --mode slurm \\ --star-2-pass-basic \\ --dry-run An email notification will be sent out when the pipeline starts and ends.","title":"4.2 Run pipeline"},{"location":"RNA-seq/Theory/","text":"1. Introduction \u00b6 RNA-sequencing ( RNA-seq ) has a wide variety of applications; this transcriptome profiling method can be used to quantify gene and isoform expression, find changes in alternative splicing, detect gene-fusion events, call variants and much more. It is also worth noting that RNA-seq can be coupled with other biochemical assays to analyze many other aspects of RNA biology, such as RNA\u2013protein binding (CLIP-seq, RIP-seq), RNA structure (SHAPE-seq), or RNA\u2013RNA interactions (CLASH-seq). These applications are, however, beyond the scope of this documentation as we focus on typical RNA-seq project (i.e. quantifying expression and gene fusions). Our focus is to outline current standards and resources for the bioinformatics analysis of RNA-seq data. We do not aim to provide an exhaustive compilation of resources or software tools. Rather, we aim to provide a guideline and conceptual overview for RNA-seq data analysis based on our best-practices RNA-seq pipeline. Here we review all of the typical major steps in RNA-seq data analysis, starting from experimental design, quality control, read alignment, quantification of gene and transcript levels, and visualization. 2. Experimental Design \u00b6 Just like any other scientific experiment, a good RNA-seq experiment is hypothesis-driven. If you cannot describe the problem you are trying to address, throwing NGS at the problem is not a cure-all solution. Fishing for results is a waste of your time and is bad science. As so, designing a well-thought-out experiment around a testable question will maximize the likelihood of generating high-impact results. The data that is generated will determine whether you have the potential to answer your biological question of interest. As a prerequisite, you need to think about how you will construct your libraries; the correct sequencing depth to address your question of interest; the number of replicates, and strategies to reduce/mitigate batch effects. 2.1 Library construction \u00b6 rRNA can comprise up to 80% of the RNA in a cell. An important consideration is the RNA extraction protocol that will be used to remove the highly abundant ribosomal RNA (rRNA). For eukaryotic cells, there are two major considerations: choosing whether to enrich for mRNA or whether to deplete rRNA. 2.1.1 mRNA \u00b6 Poly-(A) selection is a common method used to enrich for mRNA. This method generates the highest percentage of reads which will ultimately map to protein-coding genes-- making it a common choice for most applications. That being said, poly(A)-selection requires your RNA to be of high quality with minimal degradation. Degraded samples that are followed with ploy(A)-selection may result in a 3\u2019 bias, which in effect, may introduce downstream biases into your results. 2.1.2 total RNA \u00b6 The second method captures total RNA through the depletion of rRNA. This method allows you to examine both mRNA and other non-coding RNA species such as lncRNAs. Again, depending on the question you are trying to answer this may be the right method for you. Although, it should be noted that both methods, mRNA and total RNA, require RINs (>8). But if you samples do contain slightly degraded RNA, you might be able to use the total RNA method over poly(A)-selection. 2.2 Sequencing Depth \u00b6 Sequencing depth or library size is another important design factor. As sequencing depth is increased, more transcripts will be detected (up until a saturation point), and their relative abundance will be quantified more accurately. At the end of the day, the targeted sequencing depth depends on the aims of the experiment. Are you trying to quantify differences in gene expression, are you trying to quantify differential isoform usage or alternative splicing events? The numbers quoted below are more or less tailored to quantify differences in gene expression. If you are trying to quantify changes in alternative splicing or isoform regulation, you are going to much higher coverage (~ 100M paired-end reads). 2.2.1 mRNA \u00b6 For mRNA libraries or libraries generated from a prep kit using poly-(A) selection, we recommend a minimum sequencing depth of 10-20M paired-end reads (or 20-40M reads). RNA must be of high quality or a 3' bias may be observed. 2.2.2 total RNA \u00b6 For total RNA libraries, we recommend a sequencing depth of 25-60M paired-end reads (or 50-120M reads). RNA must be of high quality. Note: In the sections above and below, when I say to paired-end reads I am referring to read pairs generated from paired-end sequencing of a given cDNA fragment. You will sometimes see reads reported as pairs of reads or total reads. 2.3 Replicates \u00b6 Another important design factor is the number of replicates. That being said, biological replicates are always preferred over technical replicates. 2.3.1 Recommendation \u00b6 We recommend 4 biological replicates per experimental condition or group. Having more replicates is good for several reasons because in the real world problems arise. If you have a bad sample that cannot be used due to severe QC issues, you are still left with 3 biological replicates. This allows you to drop a bad sample without comprising statistical power downstream. 2.3.2 Bare Minimum \u00b6 If cost is a factor, at a minimum, 3 biological replicates will ensure good statistical power for downstream analysis. 2.4 Reducing Batch Effects \u00b6 Batch effects represent unwanted sources of technical variation. Batch effects introduce non-biological variation into your data, which if not accounted for can influence the results. Through the process of library preparation to sequencing, there are a number of steps (such as RNA extraction to adapter ligation to lane loading, etc.) that might introduce biases into the resulting data. As a general rule of thumb, the best way to reduce the introduction of batch effects is through uniform processing-- meaning you need to ensure that differences in sample handling are minimal. This means that samples should be processed by the same lab technician and everything should be done in a uniform manner. That being said, do not extract your RNA at different times, do not use different lots of reagents! If a large number of samples are being processed and everything cannot be done at the same time, process representative samples from each biological group at the same time. This will ensure that batches and your variable of interest do not become confounded. Also, keep note of which samples belong to each batch. This information will be needed for batch correction. To reduce the possibility of introducing batch effects from sequencing, all samples should be multiplexed together on the same lane(s). Sample Group Batch Batch* Treatment_rep_1 KO 1 1 Treatment_rep_2 KO 2 1 Treatment_rep_3 KO 1 1 Treatment_rep_4 KO 2 1 Control_rep_1 WT 1 2 Control_rep_2 WT 2 2 Control_rep_3 WT 1 2 Control_rep_4 WT 2 2 Batch = properly balanced batches, easily corrected Batch* = groups and batch totally confounded, cannot be corrected That being said, some problems cannot be bioinformatically corrected. If your variable of interest is totally confounded with your batches, applying batch correction to fix the problem is not going to work, and will lead to undesired results (i.e. Batch* column). If batches must be introduced due to other constraining factors, please keep note which samples belong to each batch, and please put some thought into how to properly balance samples across your batches. 3. Quality Control \u00b6 Quality-control ( QC ) is extremely important! As the old adage goes: Garbage in, Garbage out! If there is one thing that to take away from this document, let it be that. Performing QC checks will help ensure that your results are reliable and reproducible. It is worth noting that there is a large variety of open-source tools that can be used to assess the quality of your data so there is no reason to re-invent the wheel. Please keep this in mind but also be aware that there are many wheels per se , and you will need to know which to use and when. In this next section, we will cover different quality-control checks that can be applied at different stages of your RNA-seq analysis. These recommendations are based on a few tools our best-practices RNA-seq pipeline employs. 3.1 Pre-aligment \u00b6 Before drawing biological conclusions, it is important to perform quality control checks to ensure that there are no signs of sequencing error, biases in your data, or other sources of contamination. Modern high-throughput sequencers generate millions of reads per run, and in the real world, problems can arise. The general idea is to assess the quality of your reads before and after adapter removal and to check for different sources of contamination before proceeding to alignment. Here are a few of the tools that we use and recommend. 3.1.1 Sequencing Quality \u00b6 To assess the sequencing quality of your data, we recommend running FastQC before and after adapter trimming. FastQC generates a set of basic statistics to identify problems that can arise during sequencing or library preparation. FastQC will summarize per base and per read QC metrics such as quality scores and GC content (ideally, this plot should have a normal distribution with no forms of bimodality). It will also summarize the distribution of sequence lengths and will report the presence of adapter sequences, which is one reason we run it after removing adapters. 3.1.2 Contamination Screening \u00b6 During the process of sample collection to library preparation, there is a risk for introducing wanted sources of DNA. FastQ Screen compares your sequencing data to a set of different reference genomes to determine if there is contamination. It allows a user to see if the composition of your library matches what you expect. If your data has high levels of human, mouse, fungi, or bacterial contamination, FastQ Screen will tell you. FastQ Screen will tell you what percentage of your library aligns against different reference genomes. If there are high levels of microbial contamination, Kraken will provide an estimation of the taxonomic composition. Kraken can be used in conjunction with Krona to produce interactive reports. Note: Due to high levels of homology between organisms, there may be a small portion of your reads that align to an unexpected reference genome. Again, this should be a minimal percentage of your reads. 3.2 Post-alignment \u00b6 Again, there are many tools available to assess the quality of your data post-alignment, and as stated before, there is no need to re-invent the wheel. Please see the table below for a generalized set of guidelines for different pre/post QC metrics. 3.2.1 Library Complexity \u00b6 Preseq can be used to estimate the complexity of a library for each of your samples. If the duplication rate is very high, the overall library complexity will be low. Low library complexity could signal an issue with library preparation or sample preparation (FFPE samples) where very little input RNA was over-amplified or the sample may be degraded. 3.2.2 Library Composition \u00b6 Picard has a particularly useful sub-command called CollectRNAseqMetrics which reports the number and percentage of reads that align to various regions: such as coding, intronic, UTR, intergenic and ribosomal regions. This is particularly useful as you would expect a library constructed with ploy(A)-selection to have a high percentage of reads that map to coding regions. Picard CollectRNAseqMetrics will also report the uniformity of coverage across all genes, which is useful for determining whether a sample has a 3' bias (observed in libraries containing degraded RNA). 3.2.3 RNA Quality \u00b6 This is another particularity useful package that is tailored for RNA-seq data. The package is made up of over 20 sub-module that can be used to do things like calculate the average insert size between paired-end reads (which is useful for GEO upload), annotate the percentage of reads spanning known or novel splice junctions, convert a BAM file into a normalized BigWig file, and infer RNA quality. 3.3 Guidelines \u00b6 Here is a set of generalized guidelines for different QC metrics. Some of these metrics will vary genome-to-genome depending on the quality of the assembly and annotation but that has been taken into consideration for our set of supported reference genomes. QC Metric Guidelines mRNA total RNA RNA Type(s) Coding Coding + non-coding RIN >= 8 [low RIN ~ 3' bias] >= 8 Single-end vs Paired-end Paired-end Paired-end Sequencing Depth 10-20M PE reads 25-60M PE reads FastQC Q30 > 70% Q30 > 70% Percent Aligned to Reference > 70% > 65% Million Reads Aligned Reference > 7M PE reads > 16.5M PE reads Percent Aligned to rRNA < 5% < 15% Picard RNAseqMetrics Coding > 50% Coding > 35% Picard RNAseqMetrics Intronic + Intergenic < 25% Intronic + Intergenic < 40% RSeQC TIN medTIN > 65 medTIN > 60 The median TIN value reported by RSeQC works reasonably well for quickly identifying problematic samples. 4. Data Processing \u00b6 Starting from raw data (FastQ files), how do we get a raw counts matrix, or how do we get a list of differential expressed genes? Before feeding your data into an R package for differential expression analysis, it needs to be processed to add biological context to it. In this section, we will talk about the data processing pipeline in more detail-- more specifically focusing on primary and secondary analysis. 4.1 Primary Analysis \u00b6 Raw data > Adapter Trimming > Alignment > Quantification 4.1.1 Adapter Trimming \u00b6 One of the first steps in this process is to remove any unwanted adapters sequences from your reads in before alignment. Adapters are composed of synthetic sequences and should be removed prior to alignment. Adapter removal is especially important in certain protocols, such as miRNA-seq. When smaller fragments are sequenced it is almost certain there will be some form of adapter contamination. 4.1.2 Alignment \u00b6 In the alignment step, we add biological context to the raw data. In this step, we align reads to the reference genome to find where the sequenced fragments originate. Accurate alignment of the cDNA fragments (which are derived from RNA) is difficult. Alternative splicing introduces the problem of aligning to non-contiguous regions, and using traditional genomic alignment algorithms can produce inaccurate or low-quality alignments due to the combination of alternative splicing and genomic variation (substitutions, insertions, and deletions). This has lead to the development of splice-aware aligners like STAR, which are designed to overcome these issues. STAR can also be run in a two-pass mode for enhanced detection of reads mapping to novel splice junctions. 4.1.3 Quantification \u00b6 In the quantification step, the number of reads that mapped to a particular genomic feature (such as a gene or isoform) is counted. It is important to keep in mind that raw counts are biased by a number of factors such as library size, feature-length, and other compositional biases. As so, it is important to normalize your data to remove these biases before summarizing differences between groups of samples.","title":"Theory"},{"location":"RNA-seq/Theory/#1-introduction","text":"RNA-sequencing ( RNA-seq ) has a wide variety of applications; this transcriptome profiling method can be used to quantify gene and isoform expression, find changes in alternative splicing, detect gene-fusion events, call variants and much more. It is also worth noting that RNA-seq can be coupled with other biochemical assays to analyze many other aspects of RNA biology, such as RNA\u2013protein binding (CLIP-seq, RIP-seq), RNA structure (SHAPE-seq), or RNA\u2013RNA interactions (CLASH-seq). These applications are, however, beyond the scope of this documentation as we focus on typical RNA-seq project (i.e. quantifying expression and gene fusions). Our focus is to outline current standards and resources for the bioinformatics analysis of RNA-seq data. We do not aim to provide an exhaustive compilation of resources or software tools. Rather, we aim to provide a guideline and conceptual overview for RNA-seq data analysis based on our best-practices RNA-seq pipeline. Here we review all of the typical major steps in RNA-seq data analysis, starting from experimental design, quality control, read alignment, quantification of gene and transcript levels, and visualization.","title":"1. Introduction"},{"location":"RNA-seq/Theory/#2-experimental-design","text":"Just like any other scientific experiment, a good RNA-seq experiment is hypothesis-driven. If you cannot describe the problem you are trying to address, throwing NGS at the problem is not a cure-all solution. Fishing for results is a waste of your time and is bad science. As so, designing a well-thought-out experiment around a testable question will maximize the likelihood of generating high-impact results. The data that is generated will determine whether you have the potential to answer your biological question of interest. As a prerequisite, you need to think about how you will construct your libraries; the correct sequencing depth to address your question of interest; the number of replicates, and strategies to reduce/mitigate batch effects.","title":"2. Experimental Design"},{"location":"RNA-seq/Theory/#21-library-construction","text":"rRNA can comprise up to 80% of the RNA in a cell. An important consideration is the RNA extraction protocol that will be used to remove the highly abundant ribosomal RNA (rRNA). For eukaryotic cells, there are two major considerations: choosing whether to enrich for mRNA or whether to deplete rRNA.","title":"2.1 Library construction"},{"location":"RNA-seq/Theory/#211-mrna","text":"Poly-(A) selection is a common method used to enrich for mRNA. This method generates the highest percentage of reads which will ultimately map to protein-coding genes-- making it a common choice for most applications. That being said, poly(A)-selection requires your RNA to be of high quality with minimal degradation. Degraded samples that are followed with ploy(A)-selection may result in a 3\u2019 bias, which in effect, may introduce downstream biases into your results.","title":"2.1.1 mRNA"},{"location":"RNA-seq/Theory/#212-total-rna","text":"The second method captures total RNA through the depletion of rRNA. This method allows you to examine both mRNA and other non-coding RNA species such as lncRNAs. Again, depending on the question you are trying to answer this may be the right method for you. Although, it should be noted that both methods, mRNA and total RNA, require RINs (>8). But if you samples do contain slightly degraded RNA, you might be able to use the total RNA method over poly(A)-selection.","title":"2.1.2 total RNA"},{"location":"RNA-seq/Theory/#22-sequencing-depth","text":"Sequencing depth or library size is another important design factor. As sequencing depth is increased, more transcripts will be detected (up until a saturation point), and their relative abundance will be quantified more accurately. At the end of the day, the targeted sequencing depth depends on the aims of the experiment. Are you trying to quantify differences in gene expression, are you trying to quantify differential isoform usage or alternative splicing events? The numbers quoted below are more or less tailored to quantify differences in gene expression. If you are trying to quantify changes in alternative splicing or isoform regulation, you are going to much higher coverage (~ 100M paired-end reads).","title":"2.2 Sequencing Depth"},{"location":"RNA-seq/Theory/#221-mrna","text":"For mRNA libraries or libraries generated from a prep kit using poly-(A) selection, we recommend a minimum sequencing depth of 10-20M paired-end reads (or 20-40M reads). RNA must be of high quality or a 3' bias may be observed.","title":"2.2.1 mRNA"},{"location":"RNA-seq/Theory/#222-total-rna","text":"For total RNA libraries, we recommend a sequencing depth of 25-60M paired-end reads (or 50-120M reads). RNA must be of high quality. Note: In the sections above and below, when I say to paired-end reads I am referring to read pairs generated from paired-end sequencing of a given cDNA fragment. You will sometimes see reads reported as pairs of reads or total reads.","title":"2.2.2 total RNA"},{"location":"RNA-seq/Theory/#23-replicates","text":"Another important design factor is the number of replicates. That being said, biological replicates are always preferred over technical replicates.","title":"2.3 Replicates"},{"location":"RNA-seq/Theory/#231-recommendation","text":"We recommend 4 biological replicates per experimental condition or group. Having more replicates is good for several reasons because in the real world problems arise. If you have a bad sample that cannot be used due to severe QC issues, you are still left with 3 biological replicates. This allows you to drop a bad sample without comprising statistical power downstream.","title":"2.3.1 Recommendation"},{"location":"RNA-seq/Theory/#232-bare-minimum","text":"If cost is a factor, at a minimum, 3 biological replicates will ensure good statistical power for downstream analysis.","title":"2.3.2 Bare Minimum"},{"location":"RNA-seq/Theory/#24-reducing-batch-effects","text":"Batch effects represent unwanted sources of technical variation. Batch effects introduce non-biological variation into your data, which if not accounted for can influence the results. Through the process of library preparation to sequencing, there are a number of steps (such as RNA extraction to adapter ligation to lane loading, etc.) that might introduce biases into the resulting data. As a general rule of thumb, the best way to reduce the introduction of batch effects is through uniform processing-- meaning you need to ensure that differences in sample handling are minimal. This means that samples should be processed by the same lab technician and everything should be done in a uniform manner. That being said, do not extract your RNA at different times, do not use different lots of reagents! If a large number of samples are being processed and everything cannot be done at the same time, process representative samples from each biological group at the same time. This will ensure that batches and your variable of interest do not become confounded. Also, keep note of which samples belong to each batch. This information will be needed for batch correction. To reduce the possibility of introducing batch effects from sequencing, all samples should be multiplexed together on the same lane(s). Sample Group Batch Batch* Treatment_rep_1 KO 1 1 Treatment_rep_2 KO 2 1 Treatment_rep_3 KO 1 1 Treatment_rep_4 KO 2 1 Control_rep_1 WT 1 2 Control_rep_2 WT 2 2 Control_rep_3 WT 1 2 Control_rep_4 WT 2 2 Batch = properly balanced batches, easily corrected Batch* = groups and batch totally confounded, cannot be corrected That being said, some problems cannot be bioinformatically corrected. If your variable of interest is totally confounded with your batches, applying batch correction to fix the problem is not going to work, and will lead to undesired results (i.e. Batch* column). If batches must be introduced due to other constraining factors, please keep note which samples belong to each batch, and please put some thought into how to properly balance samples across your batches.","title":"2.4 Reducing Batch Effects"},{"location":"RNA-seq/Theory/#3-quality-control","text":"Quality-control ( QC ) is extremely important! As the old adage goes: Garbage in, Garbage out! If there is one thing that to take away from this document, let it be that. Performing QC checks will help ensure that your results are reliable and reproducible. It is worth noting that there is a large variety of open-source tools that can be used to assess the quality of your data so there is no reason to re-invent the wheel. Please keep this in mind but also be aware that there are many wheels per se , and you will need to know which to use and when. In this next section, we will cover different quality-control checks that can be applied at different stages of your RNA-seq analysis. These recommendations are based on a few tools our best-practices RNA-seq pipeline employs.","title":"3. Quality Control"},{"location":"RNA-seq/Theory/#31-pre-aligment","text":"Before drawing biological conclusions, it is important to perform quality control checks to ensure that there are no signs of sequencing error, biases in your data, or other sources of contamination. Modern high-throughput sequencers generate millions of reads per run, and in the real world, problems can arise. The general idea is to assess the quality of your reads before and after adapter removal and to check for different sources of contamination before proceeding to alignment. Here are a few of the tools that we use and recommend.","title":"3.1 Pre-aligment"},{"location":"RNA-seq/Theory/#311-sequencing-quality","text":"To assess the sequencing quality of your data, we recommend running FastQC before and after adapter trimming. FastQC generates a set of basic statistics to identify problems that can arise during sequencing or library preparation. FastQC will summarize per base and per read QC metrics such as quality scores and GC content (ideally, this plot should have a normal distribution with no forms of bimodality). It will also summarize the distribution of sequence lengths and will report the presence of adapter sequences, which is one reason we run it after removing adapters.","title":"3.1.1 Sequencing Quality"},{"location":"RNA-seq/Theory/#312-contamination-screening","text":"During the process of sample collection to library preparation, there is a risk for introducing wanted sources of DNA. FastQ Screen compares your sequencing data to a set of different reference genomes to determine if there is contamination. It allows a user to see if the composition of your library matches what you expect. If your data has high levels of human, mouse, fungi, or bacterial contamination, FastQ Screen will tell you. FastQ Screen will tell you what percentage of your library aligns against different reference genomes. If there are high levels of microbial contamination, Kraken will provide an estimation of the taxonomic composition. Kraken can be used in conjunction with Krona to produce interactive reports. Note: Due to high levels of homology between organisms, there may be a small portion of your reads that align to an unexpected reference genome. Again, this should be a minimal percentage of your reads.","title":"3.1.2 Contamination Screening"},{"location":"RNA-seq/Theory/#32-post-alignment","text":"Again, there are many tools available to assess the quality of your data post-alignment, and as stated before, there is no need to re-invent the wheel. Please see the table below for a generalized set of guidelines for different pre/post QC metrics.","title":"3.2 Post-alignment"},{"location":"RNA-seq/Theory/#321-library-complexity","text":"Preseq can be used to estimate the complexity of a library for each of your samples. If the duplication rate is very high, the overall library complexity will be low. Low library complexity could signal an issue with library preparation or sample preparation (FFPE samples) where very little input RNA was over-amplified or the sample may be degraded.","title":"3.2.1 Library Complexity"},{"location":"RNA-seq/Theory/#322-library-composition","text":"Picard has a particularly useful sub-command called CollectRNAseqMetrics which reports the number and percentage of reads that align to various regions: such as coding, intronic, UTR, intergenic and ribosomal regions. This is particularly useful as you would expect a library constructed with ploy(A)-selection to have a high percentage of reads that map to coding regions. Picard CollectRNAseqMetrics will also report the uniformity of coverage across all genes, which is useful for determining whether a sample has a 3' bias (observed in libraries containing degraded RNA).","title":"3.2.2 Library Composition"},{"location":"RNA-seq/Theory/#323-rna-quality","text":"This is another particularity useful package that is tailored for RNA-seq data. The package is made up of over 20 sub-module that can be used to do things like calculate the average insert size between paired-end reads (which is useful for GEO upload), annotate the percentage of reads spanning known or novel splice junctions, convert a BAM file into a normalized BigWig file, and infer RNA quality.","title":"3.2.3 RNA Quality"},{"location":"RNA-seq/Theory/#33-guidelines","text":"Here is a set of generalized guidelines for different QC metrics. Some of these metrics will vary genome-to-genome depending on the quality of the assembly and annotation but that has been taken into consideration for our set of supported reference genomes. QC Metric Guidelines mRNA total RNA RNA Type(s) Coding Coding + non-coding RIN >= 8 [low RIN ~ 3' bias] >= 8 Single-end vs Paired-end Paired-end Paired-end Sequencing Depth 10-20M PE reads 25-60M PE reads FastQC Q30 > 70% Q30 > 70% Percent Aligned to Reference > 70% > 65% Million Reads Aligned Reference > 7M PE reads > 16.5M PE reads Percent Aligned to rRNA < 5% < 15% Picard RNAseqMetrics Coding > 50% Coding > 35% Picard RNAseqMetrics Intronic + Intergenic < 25% Intronic + Intergenic < 40% RSeQC TIN medTIN > 65 medTIN > 60 The median TIN value reported by RSeQC works reasonably well for quickly identifying problematic samples.","title":"3.3 Guidelines"},{"location":"RNA-seq/Theory/#4-data-processing","text":"Starting from raw data (FastQ files), how do we get a raw counts matrix, or how do we get a list of differential expressed genes? Before feeding your data into an R package for differential expression analysis, it needs to be processed to add biological context to it. In this section, we will talk about the data processing pipeline in more detail-- more specifically focusing on primary and secondary analysis.","title":"4. Data Processing"},{"location":"RNA-seq/Theory/#41-primary-analysis","text":"Raw data > Adapter Trimming > Alignment > Quantification","title":"4.1 Primary Analysis"},{"location":"RNA-seq/Theory/#411-adapter-trimming","text":"One of the first steps in this process is to remove any unwanted adapters sequences from your reads in before alignment. Adapters are composed of synthetic sequences and should be removed prior to alignment. Adapter removal is especially important in certain protocols, such as miRNA-seq. When smaller fragments are sequenced it is almost certain there will be some form of adapter contamination.","title":"4.1.1 Adapter Trimming"},{"location":"RNA-seq/Theory/#412-alignment","text":"In the alignment step, we add biological context to the raw data. In this step, we align reads to the reference genome to find where the sequenced fragments originate. Accurate alignment of the cDNA fragments (which are derived from RNA) is difficult. Alternative splicing introduces the problem of aligning to non-contiguous regions, and using traditional genomic alignment algorithms can produce inaccurate or low-quality alignments due to the combination of alternative splicing and genomic variation (substitutions, insertions, and deletions). This has lead to the development of splice-aware aligners like STAR, which are designed to overcome these issues. STAR can also be run in a two-pass mode for enhanced detection of reads mapping to novel splice junctions.","title":"4.1.2 Alignment"},{"location":"RNA-seq/Theory/#413-quantification","text":"In the quantification step, the number of reads that mapped to a particular genomic feature (such as a gene or isoform) is counted. It is important to keep in mind that raw counts are biased by a number of factors such as library size, feature-length, and other compositional biases. As so, it is important to normalize your data to remove these biases before summarizing differences between groups of samples.","title":"4.1.3 Quantification"},{"location":"RNA-seq/build/","text":"rna-seek build \u00b6 1. About \u00b6 The rna-seek executable is composed of several inter-related sub commands. Please see rna-seek -h for all available options. This part of the documentation describes options and concepts for rna-seek build sub command in more detail. With minimal configuration, the build sub command enables you to build new reference files for the rna-seek run pipeline. Setting up the RNA-seek build pipeline is fast and easy! In its most basic form, rna-seek build only has five required inputs . 2. Synopsis \u00b6 $ rna-seek build [--help] \\ [--shared-resources SHARED_RESOURCES] [--small-genome] \\ [--dry-run] [--singularity-cache SINGULARITY_CACHE] \\ [--sif-cache SIF_CACHE] [--tmp-dir TMP_DIR] \\ --ref-fa REF_FA \\ --ref-name REF_NAME \\ --ref-gtf REF_GTF \\ --gtf-ver GTF_VER \\ --output OUTPUT The synopsis for each command shows its parameters and their usage. Optional parameters are shown in square brackets. A user must provide the genomic sequence of the reference's assembly in FASTA format via --ref-fa argument, an alias for the reference genome via --ref-name argument, a gene annotation for the reference assembly via --ref-gtf argument, an alias or version for the gene annotation via the --gtf-ver argument, and an output directory to store the built reference files via --output argument. If you are running the pipeline outside of Biowulf, you will need to additionally provide the the following options: --shared-resources , --tmp-dir . More information about each of these options can be found below. For human and mouse data, we highly recommend downloading the latest available PRI genome assembly and corresponding gene annotation from GENCODE . These reference files contain chromosomes and scaffolds sequences. The build pipeline will generate a JSON file containing key, value pairs to required reference files for the rna-seek run pipeline. This file will be located in the path provided to --output . The name of this JSON file is dependent on the values provided to --ref-name and --gtf-ver and has the following naming convention: {OUTPUT}/{REF_NAME}_{GTF_VER}.json . Once the build pipeline completes, this reference JSON file can be passed to the --genome option of rna-seek run . This is how new references are built for the RNA-seek pipeline. Use you can always use the -h option for information on a specific command. 2.1 Required Arguments \u00b6 Each of the following arguments are required. Failure to provide a required argument will result in a non-zero exit-code. --ref-fa REF_FA Genomic FASTA file of the reference genome. type: file This file represents the genome sequence of the reference assembly in FASTA format. If you are downloading this from GENCODE, you should select the PRI genomic FASTA file. This file will contain the primary genomic assembly (contains chromosomes and scaffolds). This input file should not be compressed. Sequence identifers in this file must match with sequence identifers in the GTF file provided to --ref-gtf . Example: --ref-fa GRCh38.primary_assembly.genome.fa --ref-name REF_NAME Name of the reference genome. type: string Name or alias for the reference genome. This can be the common name for the reference genome. Here is a list of common examples for different model organisms: mm10, hg38, rn6, danRer11, dm6, canFam3, sacCer3, ce11. If the provided values contains one of the following sub-strings (hg19, hs37d, grch37, hg38, hs38d, grch38, mm10, grcm38), then Arriba will run with its corresponding blacklist. Example: --ref-name hg38 --ref-gtf REF_GTF Gene annotation or GTF file for the reference genome. type: file This file represents the reference genome's gene annotation in GTF format. If you are downloading this from GENCODE, you should select the 'PRI' GTF file. This file contains gene annotations for the primary assembly (contains chromosomes and scaffolds). This input file should not be compressed. Sequence identifers (column 1) in this file must match with sequence identifers in the FASTA file provided to --ref-fa . Example: --ref-gtf gencode.v36.primary_assembly.annotation.gtf --gtf-ver GTF_VER Version of the gene annotation or GTF file provided. type: string or int This is the version of the supplied gene annotation or GTF file. If you are using a GTF file from GENCODE, use the release number or version (i.e. M25 for mouse or 37 for human). Visit gencodegenes.org for more details. Example: --gtf-ver 36 --output OUTPUT Path to an output directory. type: path This location is where the build pipeline will create all of its output files. If the user-provided working directory has not been initialized, it will automatically be created. Example: --output /data/$USER/refs/hg38_v36/ 2.2 Build Options \u00b6 Each of the following arguments are optional and do not need to be provided. If you are running the pipeline outside of Biowulf, the --shared-resources option only needs to be provided at least once. This will ensure reference files that are shared across different genomes are downloaded locally. --shared-resources SHARED_RESOURCES Local path to shared resources. type: path The pipeline uses a set of shared reference files that can be re-used across reference genomes. These currently include reference files for kraken and FQScreen. These reference files can be downloaded with the build sub command's --shared-resources option. With that being said, these files only need to be downloaded once. We recommend storing this files in a shared location on the filesystem that other people can access. If you are running the pipeline on Biowulf, you do NOT need to download these reference files! They already exist on the filesystem in a location that anyone can acceess; however, if you are running the pipeline on another cluster or target system, you will need to download the shared resources with the build sub command, and you will need to provide this option every time you run the pipeline. Please provide the same path that was provided to the build sub command's --shared-resources option. Again, if you are running the pipeline on Biowulf, you do NOT need to provide this option. For more information about how to download shared resources, please reference the build sub command's --shared-resources option. Example: --shared-resources /data/shared/rna-seek --small-genome Builds a small genome index. type: boolean For small genomes, it is recommeded running STAR with a scaled down --genomeSAindexNbases value. This option runs the build pipeline in a mode where it dynamically finds the optimal value for this option using the following formula: min(14, log2(GenomeSize)/2 - 1) . Generally speaking, this option is not really applicable for most mammalian reference genomes, i.e. human and mouse; however, researcher working with very small reference genomes, like S. cerevisiae ~ 12Mb, should provide this option. When in doubt feel free to provide this option, as the optimal value will be found based on your input. It is also worth noting that if you are working with a prokaryotic genome, like a bacterial genome, you will run to provide the --prokaryote option to the run subcommand . Example: --small-genome 2.3 Orchestration Options \u00b6 --dry-run Dry run the build pipeline. type: boolean Displays what steps in the build pipeline remain or will be run. Does not execute anything! Example: --dry-run --singularity-cache SINGULARITY_CACHE Overrides the $SINGULARITY_CACHEDIR environment variable. type: path default: --output OUTPUT/.singularity Singularity will cache image layers pulled from remote registries. This ultimately speeds up the process of pull an image from DockerHub if an image layer already exists in the singularity cache directory. By default, the cache is set to the value provided to the --output argument. Please note that this cache cannot be shared across users. Singularity strictly enforces you own the cache directory and will return a non-zero exit code if you do not own the cache directory! See the --sif-cache option to create a shareable resource. Example: --singularity-cache /data/$USER/.singularity --sif-cache SIF_CACHE Path where a local cache of SIFs are stored. type: path Uses a local cache of SIFs on the filesystem. This SIF cache can be shared across users if permissions are set correctly. If a SIF does not exist in the SIF cache, the image will be pulled from Dockerhub and a warning message will be displayed. The rna-seek cache subcommand can be used to create a local SIF cache. Please see rna-seek cache for more information. This command is extremely useful for avoiding DockerHub pull rate limits. It also remove any potential errors that could occur due to network issues or DockerHub being temporarily unavailable. We recommend running RNA-seek with this option when ever possible. Example: --singularity-cache /data/$USER/SIFs --tmp-dir TMP_DIR Path on the file system for writing temporary files. type: path default: /lscratch/$SLURM_JOBID This is a path on the file system for writing temporary output files. By default, the temporary directory is set to '/lscratch/$SLURM_JOBID' for backwards compatibility with the NIH's Biowulf cluster; however, if you are running the pipeline on another cluster, this option will need to be specified. Ideally, this path should point to a dedicated location on the filesystem for writing tmp files. On many systems, this location is set to somewhere in /scratch. If you need to inject a variable into this string that should NOT be expanded, please quote this options value in single quotes. Again, if you are running the pipeline on Biowulf, you do NOT need to provide this option. Example: --tmp-dir /cluster_scratch/$USER/ 2.4 Misc Options \u00b6 Each of the following arguments are optional and do not need to be provided. -h, --help Display Help. type: boolean Shows command's synopsis, help message, and an example command Example: --help 3. Hybrid Genomes \u00b6 If you have two GTF files, e.g. hybrid genomes (host + virus), then you need to create one genomic FASTA file and one GTF file for the hybrid genome prior to running the rna-seek build command. We recommend creating an artifical chromosome for the non-host sequence. The sequence identifer in the FASTA file must match the sequence identifer in the GTF file (column 1). Generally speaking, since the host annotation is usually downloaded from Ensembl or GENCODE, it will be correctly formatted; however, that may not be the case for the non-host sequence! Please ensure the non-host annotation contains the following features and/or constraints: for a given gene feature each gene entry has at least one transcript feature and each transcript entry has atleast one exon feature If not, the GTF file may need to be manually curated until these conditions are satisfied. Here is an example feature from a hand-curated Biotyn_probe GTF file: Biot1 BiotynProbe gene 1 21 0 .000000 + . gene_id \"Biot1\" ; gene_name \"Biot1\" ; gene_biotype \"biotynlated_probe_control\" ; Biot1 BiotynProbe transcript 1 21 0 .000000 + . gene_id \"Biot1\" ; gene_name \"Biot1\" ; gene_biotype \"biotynlated_probe_control\" ; transcript_id \"Biot1\" ; transcript_name \"Biot1\" ; transcript_type \"biotynlated_probe_control\" ; Biot1 BiotynProbe exon 1 21 0 .000000 + . gene_id \"Biot1\" ; gene_biotype \"biotynlated_probe_control\" ; transcript_id \"Biot1\" ; transcript_type \"biotynlated_probe_control\" ; In this tab-delimited example above, line 1: the gene feature has 3 required attributes in column 9: gene_id and gene_name and gene_biotype line 2: the transcript entry for the above gene repeats the same attributes with following required fields: transcript_id and transcript_name Please note: transcript_type is optional line 3: the exon entry for the above transcript has 3 required attributes: gene_id and transcript_id and gene_biotype Please note: transcript_type is optional For a given gene, the combination of the gene_id AND gene_name should form a unique string. There should be no instances where two different genes share the same gene_id AND gene_name . 4. Convert, patch or clean a malformed GTF file \u00b6 While building reference genomes from various sources, you may run into unexpected issues with the GTF file that was provided. The GTF file format has evolved over the years . Each iteration of the format has its own set of features and attributes. And while there is a basic defintion for the GTF file format, overall there is a general lack of standardization. Most of the issues encountered with the build pipeline can be attributed to this lack of standardization. Over the years, several tools have been developed to convert between formats . AGAT is an awesome set of tools that can convert between formats and fix issues as they are encountered. With that being said, we have provided a universal script to fix malformed GTF files. It also has the extra benefit that it can convert between GFF and GTF formats. As so, we recommened running this script if you run into any issues. This script is also recommended over ./resources/gff3togtf.py , which will be depreciated in the near future. For more information about the script and its usage, please run: # Steps for converting messy a GFF/GTF file # into a properly formatted GTF file # Step 0.) Pull the AGAT docker image and # create a SIF file. which singularity \\ || module load singularity 2 > /dev/null \\ || echo 'Error: singularity is not installed!' SINGULARITY_CACHEDIR = ${ PWD } /. ${ USER } \\ singularity pull -F \\ docker://quay.io/biocontainers/agat:1.4.2--pl5321hdfd78af_0 # Step 1.) Run AGAT todo the heavy lifting and # correct any major issues. AGAT can take a # GTF or GFF file as input, but we recommend # providing a GTF file to AGAT if you have # access to it (especially if it comes from # NCBI, i.e RefSeq or Genbank). singularity exec -B $PWD \\ agat_1.4.2--pl5321hdfd78af_0.sif agat_convert_sp_gff2gtf.pl \\ --gtf_version 3 \\ --gff input.gtf \\ -o converted.gtf # Step 2.) Finally run this script to add any # required metadata to the 9th column of # the GTF file and to fix any other issues. # The cleaned gtf file can be provided to # the build sub command of the pipeline. module load python/3.10 ./resources/clean_gtf.py \\ --gene-name-attribute gene_name \\ --input-gtf converted.gtf \\ --output-gtf cleaned.gtf 5. Example \u00b6 5.1 Biowulf \u00b6 On Biowulf getting started with the pipeline is fast and easy! In this example, we build a mouse reference genome. # Step 0.) Grab an interactive node (do not run on head node) srun -N 1 -n 1 --time = 2 :00:00 -p interactive --mem = 8gb --cpus-per-task = 4 --pty bash module purge module load singularity snakemake # Step 1.) Dry run the Build pipeline ./rna-seek build --ref-fa GRCm39.primary_assembly.genome.fa \\ --ref-name mm39 \\ --ref-gtf gencode.vM26.annotation.gtf \\ --gtf-ver M26 \\ --output /data/ $USER /refs/mm39_M26 \\ --sif-cache /data/OpenOmics/SIFs/ \\ --dry-run # Step 2.) Build new RNA-seek reference files ./rna-seek build --ref-fa GRCm39.primary_assembly.genome.fa \\ --ref-name mm39 \\ --ref-gtf gencode.vM26.annotation.gtf \\ --gtf-ver M26 \\ --output /data/ $USER /refs/mm39_M26 \\ --sif-cache /data/OpenOmics/SIFs/ 5.2 Generic SLURM Cluster \u00b6 Running the pipeline outside of Biowulf is easy; however, there are a few extra options you must provide. Please note when running the build sub command for the first time, you will also need to provide the --shared-resources option. This option will download our kraken2 database and bowtie2 indices for FastQ Screen. The path provided to this option should be provided to the --shared-resources option of the run sub command. Next, you will also need to provide a path to write temporary output files via the --tmp-dir option. We also recommend providing a path to a SIF cache. You can cache software containers locally with the cache sub command. # Step 0.) Grab an interactive node (do not run on head node) srun -N 1 -n 1 --time = 2 :00:00 -p interactive --mem = 8gb --cpus-per-task = 4 --pty bash # Add snakemake and singularity to $PATH, # This step may vary across clusters, you # can reach out to a sys admin if snakemake # and singularity are not installed. module purge module load singularity snakemake # Step 1.) Dry run the Build pipeline ./rna-seek build --ref-fa GRCm39.primary_assembly.genome.fa \\ --ref-name mm39 \\ --ref-gtf gencode.vM26.annotation.gtf \\ --gtf-ver M26 \\ --output /data/ $USER /refs/mm39_M26 \\ --shared-resources /data/shared/rna-seek \\ --tmp-dir /cluster_scratch/ $USER / \\ --sif-cache /data/ $USER /cache \\ --dry-run # Step 2.) Build new RNA-seek reference files ./rna-seek build --ref-fa GRCm39.primary_assembly.genome.fa \\ --ref-name mm39 \\ --ref-gtf gencode.vM26.annotation.gtf \\ --gtf-ver M26 \\ --output /data/ $USER /refs/mm39_M26 \\ --shared-resources /data/shared/rna-seek \\ --tmp-dir /cluster_scratch/ $USER / \\ --sif-cache /data/ $USER /cache","title":"build"},{"location":"RNA-seq/build/#rna-seek-build","text":"","title":"rna-seek build"},{"location":"RNA-seq/build/#1-about","text":"The rna-seek executable is composed of several inter-related sub commands. Please see rna-seek -h for all available options. This part of the documentation describes options and concepts for rna-seek build sub command in more detail. With minimal configuration, the build sub command enables you to build new reference files for the rna-seek run pipeline. Setting up the RNA-seek build pipeline is fast and easy! In its most basic form, rna-seek build only has five required inputs .","title":"1. About"},{"location":"RNA-seq/build/#2-synopsis","text":"$ rna-seek build [--help] \\ [--shared-resources SHARED_RESOURCES] [--small-genome] \\ [--dry-run] [--singularity-cache SINGULARITY_CACHE] \\ [--sif-cache SIF_CACHE] [--tmp-dir TMP_DIR] \\ --ref-fa REF_FA \\ --ref-name REF_NAME \\ --ref-gtf REF_GTF \\ --gtf-ver GTF_VER \\ --output OUTPUT The synopsis for each command shows its parameters and their usage. Optional parameters are shown in square brackets. A user must provide the genomic sequence of the reference's assembly in FASTA format via --ref-fa argument, an alias for the reference genome via --ref-name argument, a gene annotation for the reference assembly via --ref-gtf argument, an alias or version for the gene annotation via the --gtf-ver argument, and an output directory to store the built reference files via --output argument. If you are running the pipeline outside of Biowulf, you will need to additionally provide the the following options: --shared-resources , --tmp-dir . More information about each of these options can be found below. For human and mouse data, we highly recommend downloading the latest available PRI genome assembly and corresponding gene annotation from GENCODE . These reference files contain chromosomes and scaffolds sequences. The build pipeline will generate a JSON file containing key, value pairs to required reference files for the rna-seek run pipeline. This file will be located in the path provided to --output . The name of this JSON file is dependent on the values provided to --ref-name and --gtf-ver and has the following naming convention: {OUTPUT}/{REF_NAME}_{GTF_VER}.json . Once the build pipeline completes, this reference JSON file can be passed to the --genome option of rna-seek run . This is how new references are built for the RNA-seek pipeline. Use you can always use the -h option for information on a specific command.","title":"2. Synopsis"},{"location":"RNA-seq/build/#21-required-arguments","text":"Each of the following arguments are required. Failure to provide a required argument will result in a non-zero exit-code. --ref-fa REF_FA Genomic FASTA file of the reference genome. type: file This file represents the genome sequence of the reference assembly in FASTA format. If you are downloading this from GENCODE, you should select the PRI genomic FASTA file. This file will contain the primary genomic assembly (contains chromosomes and scaffolds). This input file should not be compressed. Sequence identifers in this file must match with sequence identifers in the GTF file provided to --ref-gtf . Example: --ref-fa GRCh38.primary_assembly.genome.fa --ref-name REF_NAME Name of the reference genome. type: string Name or alias for the reference genome. This can be the common name for the reference genome. Here is a list of common examples for different model organisms: mm10, hg38, rn6, danRer11, dm6, canFam3, sacCer3, ce11. If the provided values contains one of the following sub-strings (hg19, hs37d, grch37, hg38, hs38d, grch38, mm10, grcm38), then Arriba will run with its corresponding blacklist. Example: --ref-name hg38 --ref-gtf REF_GTF Gene annotation or GTF file for the reference genome. type: file This file represents the reference genome's gene annotation in GTF format. If you are downloading this from GENCODE, you should select the 'PRI' GTF file. This file contains gene annotations for the primary assembly (contains chromosomes and scaffolds). This input file should not be compressed. Sequence identifers (column 1) in this file must match with sequence identifers in the FASTA file provided to --ref-fa . Example: --ref-gtf gencode.v36.primary_assembly.annotation.gtf --gtf-ver GTF_VER Version of the gene annotation or GTF file provided. type: string or int This is the version of the supplied gene annotation or GTF file. If you are using a GTF file from GENCODE, use the release number or version (i.e. M25 for mouse or 37 for human). Visit gencodegenes.org for more details. Example: --gtf-ver 36 --output OUTPUT Path to an output directory. type: path This location is where the build pipeline will create all of its output files. If the user-provided working directory has not been initialized, it will automatically be created. Example: --output /data/$USER/refs/hg38_v36/","title":"2.1 Required Arguments"},{"location":"RNA-seq/build/#22-build-options","text":"Each of the following arguments are optional and do not need to be provided. If you are running the pipeline outside of Biowulf, the --shared-resources option only needs to be provided at least once. This will ensure reference files that are shared across different genomes are downloaded locally. --shared-resources SHARED_RESOURCES Local path to shared resources. type: path The pipeline uses a set of shared reference files that can be re-used across reference genomes. These currently include reference files for kraken and FQScreen. These reference files can be downloaded with the build sub command's --shared-resources option. With that being said, these files only need to be downloaded once. We recommend storing this files in a shared location on the filesystem that other people can access. If you are running the pipeline on Biowulf, you do NOT need to download these reference files! They already exist on the filesystem in a location that anyone can acceess; however, if you are running the pipeline on another cluster or target system, you will need to download the shared resources with the build sub command, and you will need to provide this option every time you run the pipeline. Please provide the same path that was provided to the build sub command's --shared-resources option. Again, if you are running the pipeline on Biowulf, you do NOT need to provide this option. For more information about how to download shared resources, please reference the build sub command's --shared-resources option. Example: --shared-resources /data/shared/rna-seek --small-genome Builds a small genome index. type: boolean For small genomes, it is recommeded running STAR with a scaled down --genomeSAindexNbases value. This option runs the build pipeline in a mode where it dynamically finds the optimal value for this option using the following formula: min(14, log2(GenomeSize)/2 - 1) . Generally speaking, this option is not really applicable for most mammalian reference genomes, i.e. human and mouse; however, researcher working with very small reference genomes, like S. cerevisiae ~ 12Mb, should provide this option. When in doubt feel free to provide this option, as the optimal value will be found based on your input. It is also worth noting that if you are working with a prokaryotic genome, like a bacterial genome, you will run to provide the --prokaryote option to the run subcommand . Example: --small-genome","title":"2.2 Build Options"},{"location":"RNA-seq/build/#23-orchestration-options","text":"--dry-run Dry run the build pipeline. type: boolean Displays what steps in the build pipeline remain or will be run. Does not execute anything! Example: --dry-run --singularity-cache SINGULARITY_CACHE Overrides the $SINGULARITY_CACHEDIR environment variable. type: path default: --output OUTPUT/.singularity Singularity will cache image layers pulled from remote registries. This ultimately speeds up the process of pull an image from DockerHub if an image layer already exists in the singularity cache directory. By default, the cache is set to the value provided to the --output argument. Please note that this cache cannot be shared across users. Singularity strictly enforces you own the cache directory and will return a non-zero exit code if you do not own the cache directory! See the --sif-cache option to create a shareable resource. Example: --singularity-cache /data/$USER/.singularity --sif-cache SIF_CACHE Path where a local cache of SIFs are stored. type: path Uses a local cache of SIFs on the filesystem. This SIF cache can be shared across users if permissions are set correctly. If a SIF does not exist in the SIF cache, the image will be pulled from Dockerhub and a warning message will be displayed. The rna-seek cache subcommand can be used to create a local SIF cache. Please see rna-seek cache for more information. This command is extremely useful for avoiding DockerHub pull rate limits. It also remove any potential errors that could occur due to network issues or DockerHub being temporarily unavailable. We recommend running RNA-seek with this option when ever possible. Example: --singularity-cache /data/$USER/SIFs --tmp-dir TMP_DIR Path on the file system for writing temporary files. type: path default: /lscratch/$SLURM_JOBID This is a path on the file system for writing temporary output files. By default, the temporary directory is set to '/lscratch/$SLURM_JOBID' for backwards compatibility with the NIH's Biowulf cluster; however, if you are running the pipeline on another cluster, this option will need to be specified. Ideally, this path should point to a dedicated location on the filesystem for writing tmp files. On many systems, this location is set to somewhere in /scratch. If you need to inject a variable into this string that should NOT be expanded, please quote this options value in single quotes. Again, if you are running the pipeline on Biowulf, you do NOT need to provide this option. Example: --tmp-dir /cluster_scratch/$USER/","title":"2.3 Orchestration Options"},{"location":"RNA-seq/build/#24-misc-options","text":"Each of the following arguments are optional and do not need to be provided. -h, --help Display Help. type: boolean Shows command's synopsis, help message, and an example command Example: --help","title":"2.4 Misc Options"},{"location":"RNA-seq/build/#3-hybrid-genomes","text":"If you have two GTF files, e.g. hybrid genomes (host + virus), then you need to create one genomic FASTA file and one GTF file for the hybrid genome prior to running the rna-seek build command. We recommend creating an artifical chromosome for the non-host sequence. The sequence identifer in the FASTA file must match the sequence identifer in the GTF file (column 1). Generally speaking, since the host annotation is usually downloaded from Ensembl or GENCODE, it will be correctly formatted; however, that may not be the case for the non-host sequence! Please ensure the non-host annotation contains the following features and/or constraints: for a given gene feature each gene entry has at least one transcript feature and each transcript entry has atleast one exon feature If not, the GTF file may need to be manually curated until these conditions are satisfied. Here is an example feature from a hand-curated Biotyn_probe GTF file: Biot1 BiotynProbe gene 1 21 0 .000000 + . gene_id \"Biot1\" ; gene_name \"Biot1\" ; gene_biotype \"biotynlated_probe_control\" ; Biot1 BiotynProbe transcript 1 21 0 .000000 + . gene_id \"Biot1\" ; gene_name \"Biot1\" ; gene_biotype \"biotynlated_probe_control\" ; transcript_id \"Biot1\" ; transcript_name \"Biot1\" ; transcript_type \"biotynlated_probe_control\" ; Biot1 BiotynProbe exon 1 21 0 .000000 + . gene_id \"Biot1\" ; gene_biotype \"biotynlated_probe_control\" ; transcript_id \"Biot1\" ; transcript_type \"biotynlated_probe_control\" ; In this tab-delimited example above, line 1: the gene feature has 3 required attributes in column 9: gene_id and gene_name and gene_biotype line 2: the transcript entry for the above gene repeats the same attributes with following required fields: transcript_id and transcript_name Please note: transcript_type is optional line 3: the exon entry for the above transcript has 3 required attributes: gene_id and transcript_id and gene_biotype Please note: transcript_type is optional For a given gene, the combination of the gene_id AND gene_name should form a unique string. There should be no instances where two different genes share the same gene_id AND gene_name .","title":"3. Hybrid Genomes"},{"location":"RNA-seq/build/#4-convert-patch-or-clean-a-malformed-gtf-file","text":"While building reference genomes from various sources, you may run into unexpected issues with the GTF file that was provided. The GTF file format has evolved over the years . Each iteration of the format has its own set of features and attributes. And while there is a basic defintion for the GTF file format, overall there is a general lack of standardization. Most of the issues encountered with the build pipeline can be attributed to this lack of standardization. Over the years, several tools have been developed to convert between formats . AGAT is an awesome set of tools that can convert between formats and fix issues as they are encountered. With that being said, we have provided a universal script to fix malformed GTF files. It also has the extra benefit that it can convert between GFF and GTF formats. As so, we recommened running this script if you run into any issues. This script is also recommended over ./resources/gff3togtf.py , which will be depreciated in the near future. For more information about the script and its usage, please run: # Steps for converting messy a GFF/GTF file # into a properly formatted GTF file # Step 0.) Pull the AGAT docker image and # create a SIF file. which singularity \\ || module load singularity 2 > /dev/null \\ || echo 'Error: singularity is not installed!' SINGULARITY_CACHEDIR = ${ PWD } /. ${ USER } \\ singularity pull -F \\ docker://quay.io/biocontainers/agat:1.4.2--pl5321hdfd78af_0 # Step 1.) Run AGAT todo the heavy lifting and # correct any major issues. AGAT can take a # GTF or GFF file as input, but we recommend # providing a GTF file to AGAT if you have # access to it (especially if it comes from # NCBI, i.e RefSeq or Genbank). singularity exec -B $PWD \\ agat_1.4.2--pl5321hdfd78af_0.sif agat_convert_sp_gff2gtf.pl \\ --gtf_version 3 \\ --gff input.gtf \\ -o converted.gtf # Step 2.) Finally run this script to add any # required metadata to the 9th column of # the GTF file and to fix any other issues. # The cleaned gtf file can be provided to # the build sub command of the pipeline. module load python/3.10 ./resources/clean_gtf.py \\ --gene-name-attribute gene_name \\ --input-gtf converted.gtf \\ --output-gtf cleaned.gtf","title":"4. Convert, patch or clean a malformed GTF file"},{"location":"RNA-seq/build/#5-example","text":"","title":"5. Example"},{"location":"RNA-seq/build/#51-biowulf","text":"On Biowulf getting started with the pipeline is fast and easy! In this example, we build a mouse reference genome. # Step 0.) Grab an interactive node (do not run on head node) srun -N 1 -n 1 --time = 2 :00:00 -p interactive --mem = 8gb --cpus-per-task = 4 --pty bash module purge module load singularity snakemake # Step 1.) Dry run the Build pipeline ./rna-seek build --ref-fa GRCm39.primary_assembly.genome.fa \\ --ref-name mm39 \\ --ref-gtf gencode.vM26.annotation.gtf \\ --gtf-ver M26 \\ --output /data/ $USER /refs/mm39_M26 \\ --sif-cache /data/OpenOmics/SIFs/ \\ --dry-run # Step 2.) Build new RNA-seek reference files ./rna-seek build --ref-fa GRCm39.primary_assembly.genome.fa \\ --ref-name mm39 \\ --ref-gtf gencode.vM26.annotation.gtf \\ --gtf-ver M26 \\ --output /data/ $USER /refs/mm39_M26 \\ --sif-cache /data/OpenOmics/SIFs/","title":"5.1 Biowulf"},{"location":"RNA-seq/build/#52-generic-slurm-cluster","text":"Running the pipeline outside of Biowulf is easy; however, there are a few extra options you must provide. Please note when running the build sub command for the first time, you will also need to provide the --shared-resources option. This option will download our kraken2 database and bowtie2 indices for FastQ Screen. The path provided to this option should be provided to the --shared-resources option of the run sub command. Next, you will also need to provide a path to write temporary output files via the --tmp-dir option. We also recommend providing a path to a SIF cache. You can cache software containers locally with the cache sub command. # Step 0.) Grab an interactive node (do not run on head node) srun -N 1 -n 1 --time = 2 :00:00 -p interactive --mem = 8gb --cpus-per-task = 4 --pty bash # Add snakemake and singularity to $PATH, # This step may vary across clusters, you # can reach out to a sys admin if snakemake # and singularity are not installed. module purge module load singularity snakemake # Step 1.) Dry run the Build pipeline ./rna-seek build --ref-fa GRCm39.primary_assembly.genome.fa \\ --ref-name mm39 \\ --ref-gtf gencode.vM26.annotation.gtf \\ --gtf-ver M26 \\ --output /data/ $USER /refs/mm39_M26 \\ --shared-resources /data/shared/rna-seek \\ --tmp-dir /cluster_scratch/ $USER / \\ --sif-cache /data/ $USER /cache \\ --dry-run # Step 2.) Build new RNA-seek reference files ./rna-seek build --ref-fa GRCm39.primary_assembly.genome.fa \\ --ref-name mm39 \\ --ref-gtf gencode.vM26.annotation.gtf \\ --gtf-ver M26 \\ --output /data/ $USER /refs/mm39_M26 \\ --shared-resources /data/shared/rna-seek \\ --tmp-dir /cluster_scratch/ $USER / \\ --sif-cache /data/ $USER /cache","title":"5.2 Generic SLURM Cluster"},{"location":"RNA-seq/cache/","text":"rna-seek cache \u00b6 1. About \u00b6 The rna-seek executable is composed of several inter-related sub commands. Please see rna-seek -h for all available options. This part of the documentation describes options and concepts for rna-seek cache sub command in more detail. With minimal configuration, the cache sub command enables you to cache remote resources for the RNA-seek pipeline. Caching remote resources allows the pipeline to run in an offline mode. The cache sub command creates local cache on the filesysytem for resources hosted on DockerHub or AWS S3. These resources are normally pulled onto the filesystem when the pipeline runs; however, due to network issues or DockerHub pull rate limits, it may make sense to pull the resources once so a shared cache can be created and re-used. It is worth noting that a singularity cache cannot normally be shared across users. Singularity strictly enforces that its cache is owned by the user. To get around this issue, the cache subcommand can be used to create local SIFs on the filesystem from images on DockerHub. Caching remote resources for the RNA-seek pipeline is fast and easy! In its most basic form, rna-seek cache only has one required input . 2. Synopsis \u00b6 $ ./rna-seek cache [-h] --sif-cache SIF_CACHE \\ [--dry-run] The synopsis for each command shows its parameters and their usage. Optional parameters are shown in square brackets. A user must provide a directory to cache remote Docker images via the --sif-cache argument. Once the cache has pipeline completed, the local sif cache can be passed to the --sif-cache option of the rna-seek build and rna-seek run subcomand. This enables the build and run pipeline to run in an offline mode. Use you can always use the -h option for information on a specific command. 2.1 Required Arguments \u00b6 --sif-cache SIF_CACHE Path where a local cache of SIFs will be stored. type: path Any images defined in config/containers/images.json will be pulled into the local filesystem. The path provided to this option can be passed to the --sif-cache option of the rna-seek build and rna-seek run subcomand. This allows for running the build and run pipelines in an offline mode where no requests are made to external sources. This is useful for avoiding network issues or DockerHub pull rate limits. Please see rna-seek build and run for more information. Example: --sif-cache /data/$USER/cache 2.2 Options \u00b6 Each of the following arguments are optional and do not need to be provided. -h, --help Display Help. type: boolean Shows command's synopsis, help message, and an example command Example: --help --dry-run Dry run the pipeline. type: boolean Displays what steps in the pipeline remain or will be run. Does not execute anything! Example: --dry-run 3. Example \u00b6 # Step 0.) Grab an interactive node (do not run on head node) srun -N 1 -n 1 --time = 12 :00:00 -p interactive --mem = 8gb --cpus-per-task = 4 --pty bash module purge module load singularity snakemake # Step 1.) Dry run cache to see what will be pulled ./rna-seek cache --sif-cache /data/ $USER /cache \\ --dry-run # Step 2.) Cache remote resources locally ./rna-seek cache --sif-cache /data/ $USER /cache","title":"cache"},{"location":"RNA-seq/cache/#rna-seek-cache","text":"","title":"rna-seek cache"},{"location":"RNA-seq/cache/#1-about","text":"The rna-seek executable is composed of several inter-related sub commands. Please see rna-seek -h for all available options. This part of the documentation describes options and concepts for rna-seek cache sub command in more detail. With minimal configuration, the cache sub command enables you to cache remote resources for the RNA-seek pipeline. Caching remote resources allows the pipeline to run in an offline mode. The cache sub command creates local cache on the filesysytem for resources hosted on DockerHub or AWS S3. These resources are normally pulled onto the filesystem when the pipeline runs; however, due to network issues or DockerHub pull rate limits, it may make sense to pull the resources once so a shared cache can be created and re-used. It is worth noting that a singularity cache cannot normally be shared across users. Singularity strictly enforces that its cache is owned by the user. To get around this issue, the cache subcommand can be used to create local SIFs on the filesystem from images on DockerHub. Caching remote resources for the RNA-seek pipeline is fast and easy! In its most basic form, rna-seek cache only has one required input .","title":"1. About"},{"location":"RNA-seq/cache/#2-synopsis","text":"$ ./rna-seek cache [-h] --sif-cache SIF_CACHE \\ [--dry-run] The synopsis for each command shows its parameters and their usage. Optional parameters are shown in square brackets. A user must provide a directory to cache remote Docker images via the --sif-cache argument. Once the cache has pipeline completed, the local sif cache can be passed to the --sif-cache option of the rna-seek build and rna-seek run subcomand. This enables the build and run pipeline to run in an offline mode. Use you can always use the -h option for information on a specific command.","title":"2. Synopsis"},{"location":"RNA-seq/cache/#21-required-arguments","text":"--sif-cache SIF_CACHE Path where a local cache of SIFs will be stored. type: path Any images defined in config/containers/images.json will be pulled into the local filesystem. The path provided to this option can be passed to the --sif-cache option of the rna-seek build and rna-seek run subcomand. This allows for running the build and run pipelines in an offline mode where no requests are made to external sources. This is useful for avoiding network issues or DockerHub pull rate limits. Please see rna-seek build and run for more information. Example: --sif-cache /data/$USER/cache","title":"2.1 Required Arguments"},{"location":"RNA-seq/cache/#22-options","text":"Each of the following arguments are optional and do not need to be provided. -h, --help Display Help. type: boolean Shows command's synopsis, help message, and an example command Example: --help --dry-run Dry run the pipeline. type: boolean Displays what steps in the pipeline remain or will be run. Does not execute anything! Example: --dry-run","title":"2.2 Options"},{"location":"RNA-seq/cache/#3-example","text":"# Step 0.) Grab an interactive node (do not run on head node) srun -N 1 -n 1 --time = 12 :00:00 -p interactive --mem = 8gb --cpus-per-task = 4 --pty bash module purge module load singularity snakemake # Step 1.) Dry run cache to see what will be pulled ./rna-seek cache --sif-cache /data/ $USER /cache \\ --dry-run # Step 2.) Cache remote resources locally ./rna-seek cache --sif-cache /data/ $USER /cache","title":"3. Example"},{"location":"RNA-seq/run/","text":"rna-seek run \u00b6 1. About \u00b6 The rna-seek executable is composed of several inter-related sub commands. Please see rna-seek -h for all available options. This part of the documentation describes options and concepts for rna-seek run sub command in more detail. With minimal configuration, the run sub command enables you to start running the data processing and quality-control pipeline. Setting up the RNA-seek pipeline is fast and easy! In its most basic form, rna-seek run only has three required inputs . 2. Synopsis \u00b6 $ rna-seek run [--help] \\ [--call-gene-fusions] [--prokaryote] \\ [--small-rna] [--star-2-pass-basic] \\ [--dry-run] [--mode {slurm, local}] \\ [--shared-resources SHARED_RESOURCES] \\ [--singularity-cache SINGULARITY_CACHE] \\ [--sif-cache SIF_CACHE] \\ [--tmp-dir TMP_DIR] \\ [--threads THREADS] \\ --input INPUT [INPUT ...] \\ --output OUTPUT \\ --genome {hg38_48, mm10_M25, mm39_M37, custom.json} The synopsis for each command shows its parameters and their usage. Optional parameters are shown in square brackets. A user must provide a list of FastQ files (globbing is supported) to analyze via --input argument, an output directory to store results via --output argument and select reference genome for alignment and annotation via the --genome argument. If you are running the pipeline outside of Biowulf, you will need to additionally provide the the following options: --shared-resources , --tmp-dir . More information about each of these options can be found below. Use you can always use the -h option for information on a specific sub command. 2.1 Required Arguments \u00b6 Each of the following arguments are required. Failure to provide a required argument will result in a non-zero exit-code. --input INPUT [INPUT ...] Input FastQ file(s) to process. type: file One or more FastQ files can be provided. From the command-line, each FastQ file should seperated by a space. Globbing is supported! This makes selecting FastQ files easier. Input FastQ files should be gzipp-ed. The pipeline supports single-end and pair-end RNA-seq data; however, the pipeline will not process a mixture of single-end and paired-end samples together. If you have a mixture of single-end and pair-end samples to process, please process them as two seperate instances of the RNA-seek pipeline (with two seperate output directories). Example: --input .tests/*.R?.fastq.gz --output OUTPUT Path to an output directory. type: path This location is where the pipeline will create all of its output files, also known as the pipeline's working directory. If the provided output directory does not exist, it will be initialized automatically. Example: --output /data/$USER/RNA_hg38 --genome {hg38_48, mm10_M25, mm39_M37, custom.json} Reference genome. type: string or file This option defines the reference genome for your set of samples. On Biowulf, RNA-seek does comes bundled with pre built reference files for human and mouse samples; however, it is worth noting that the pipeline does accept a custom reference genome built with the build sub command. Building a new reference genome is easy! You can create a custom reference genome with a single command. This is extremely useful when working with non-model organisms. New users can reference the documentation's getting started section to see how a reference genome is built. Pre built Option Here is a list of available pre built genomes on Biowulf: hg38_48, mm10_M25, mm39_M37. Please see the resources page for more information about each pre built option. It is worth noting that hg38_30 and mm10_M21 can still be selected. They have just been hidden from the command-line interface to encourage users to select newer reference genomes. Custom Option A user can also supply a custom reference genome built with the build sub command. Please supply the custom reference JSON file that was generated by the build sub command. The name of this custom reference JSON file is dependent on the values provided to the following rna-seek build args, --ref-name REF_NAME and --gtf-ver GTF_VER , where the name of the provided custom reference JSON file would be: {REF_NAME}_{GTF_VER}.json . Example: --genome hg38_48 OR --genome /data/${USER}/hg38_36/hg38_36.json 2.2 Analysis Options \u00b6 --call-gene-fusions Call gene fusions. type: boolean A gene fusion is a genetic alteration where two different genes become joined together, forming a new hybrid gene. If this option is provided, an extra set of steps will run to detect gene fusions with arriba. These steps will conditionally run depending on whether there are reference files for running arriba. Currently, these reference files exist for hg38 , hg19 , and mm10 . Please note if these reference are missing, then gene fusions will not be called. Example: --call-gene-fusions --prokaryote Run with prokaryotic genome alignment options. type: boolean Prokaryotic genomes, like bacteria, do not contain introns. If provided, this option will use an optimized set of options for aligning against prokaryotic genomes. This option will force STAR to avoid spliced alignments, and it will also run STAR in a 2-pass basic mode. By default, the pipeline is setup for handling alignment against eukarytoic genomes, so this option should be provided if you are working with a prokaryotic genome. This option should not be combined with the small RNA option. Example: --prokaryote --small-rna Run STAR using ENCODE's recomendations for small RNA. type: boolean This option should only be used with small RNA libraries. These are rRNA-depleted libraries that have been size selected to contain fragments shorter than 200bp. Size selection enriches for small RNA species such as miRNAs, siRNAs, or piRNAs. Also, this option should not be combined with the star 2-pass basic option. If the two options are combined, STAR will run in pass basic mode. This means that STAR will not run with ENCODE's recommendations for small RNA alignment. As so, please take caution not to combine both options together. Please note: This option is only supported with single-end data. Example: --small-rna --star-2-pass-basic Run STAR in per sample 2-pass mapping mode. type: boolean It is recommended to use this option when processing a set of unrelated samples or when processing samples in a clinical setting. It is not adivsed to use this option for a study with multiple related samples. By default, the pipeline ultilizes a multi sample 2-pass mapping approach where the set of splice junctions detected across all samples are provided to the second pass of STAR. This option overrides the default behavior so each sample will be processed in a per sample two-pass basic mode. This option should not be combined with the small RNA option. If the two options are combined, STAR will run in pass basic mode. Example: --star-2-pass-basic 2.3 Orchestration Options \u00b6 Each of the following arguments are optional and do not need to be provided. --dry-run Dry run the pipeline. type: boolean Displays what steps in the pipeline remain or will be run. Does not execute anything! Example: --dry-run --mode {slurm,local} Execution Method. type: string default: slurm Execution Method. Defines the mode or method of execution. Vaild mode options include: slurm or local. local Local executions will run serially on compute instance. This is useful for testing, debugging, or when a users does not have access to a high performance computing environment. If this option is not provided, it will default to a local execution mode. slurm The slurm execution method will submit jobs to a cluster using a slurm + singularity backend. This method will automatically submit the master job to the cluster. It is recommended running RNA-seek in this mode as execution will be significantly faster in a distributed environment. Example: --mode slurm --shared-resources SHARED_RESOURCES Local path to shared resources. type: path The pipeline uses a set of shared reference files that can be re-used across reference genomes. These currently include reference files for kraken and FQScreen. These reference files can be downloaded with the build sub command's --shared-resources option. With that being said, these files only need to be downloaded once. We recommend storing this files in a shared location on the filesystem that other people can access. If you are running the pipeline on Biowulf, you do NOT need to download these reference files! They already exist on the filesystem in a location that anyone can acceess; however, if you are running the pipeline on another cluster or target system, you will need to download the shared resources with the build sub command, and you will need to provide this option every time you run the pipeline. Please provide the same path that was provided to the build sub command's --shared-resources option. Again, if you are running the pipeline on Biowulf, you do NOT need to provide this option. For more information about how to download shared resources, please reference the build sub command's --shared-resources option. Example: --shared-resources /data/shared/rna-seek --singularity-cache SINGULARITY_CACHE Overrides the $SINGULARITY_CACHEDIR environment variable. type: path default: --output OUTPUT/.singularity Singularity will cache image layers pulled from remote registries. This ultimately speeds up the process of pull an image from DockerHub if an image layer already exists in the singularity cache directory. By default, the cache is set to the value provided to the --output argument. Please note that this cache cannot be shared across users. Singularity strictly enforces you own the cache directory and will return a non-zero exit code if you do not own the cache directory! See the --sif-cache option to create a shareable resource. Example: --singularity-cache /data/$USER/.singularity --sif-cache SIF_CACHE Path where a local cache of SIFs are stored. type: path Uses a local cache of SIFs on the filesystem. This SIF cache can be shared across users if permissions are set correctly. If a SIF does not exist in the SIF cache, the image will be pulled from Dockerhub and a warning message will be displayed. The rna-seek cache subcommand can be used to create a local SIF cache. Please see rna-seek cache for more information. This command is extremely useful for avoiding DockerHub pull rate limits. It also remove any potential errors that could occur due to network issues or DockerHub being temporarily unavailable. We recommend running RNA-seek with this option when ever possible. Example: --sif-cache /data/$USER/SIFs --tmp-dir TMP_DIR Path on the file system for writing temporary files. type: path default: /lscratch/$SLURM_JOBID This is a path on the file system for writing temporary output files. By default, the temporary directory is set to '/lscratch/$SLURM_JOBID' for backwards compatibility with the NIH's Biowulf cluster; however, if you are running the pipeline on another cluster, this option will need to be specified. Ideally, this path should point to a dedicated location on the filesystem for writing tmp files. On many systems, this location is set to somewhere in /scratch. If you need to inject a variable into this string that should NOT be expanded, please quote this options value in single quotes. Again, if you are running the pipeline on Biowulf, you do NOT need to provide this option. Example: --tmp-dir /cluster_scratch/$USER/ --threads THREADS Max number of threads for each process. type: int default: 2 Max number of threads for each process. This option is more applicable when running the pipeline with --mode local . It is recommended setting this vaule to the maximum number of CPUs available on the host machine. Example: --threads 12 2.4 Misc Options \u00b6 Each of the following arguments are optional and do not need to be provided. -h, --help Display Help. type: boolean Shows command's synopsis, help message, and an example command Example: --help 3. Example \u00b6 3.1 Biowulf \u00b6 On Biowulf getting started with the pipeline is fast and easy! The pipeline comes bundled with pre-built human and mouse reference genomes. In the example below, we will use the pre-built human reference genome. # Step 0.) Grab an interactive node (do not run on head node) srun -N 1 -n 1 --time = 12 :00:00 -p interactive --mem = 8gb --cpus-per-task = 4 --pty bash module purge module load singularity snakemake # Step 1.) Dry run pipeline with provided test data ./rna-seek run --input .tests/*.R?.fastq.gz \\ --output /data/ $USER /RNA_hg38 \\ --genome hg38_48 \\ --mode slurm \\ --star-2-pass-basic \\ --sif-cache /data/OpenOmics/SIFs/ \\ --dry-run # Step 2.) Run RNA-seek pipeline # The slurm mode will submit jobs to the cluster. # It is recommended running rna-seek in this mode. ./rna-seek run --input .tests/*.R?.fastq.gz \\ --output /data/ $USER /RNA_hg38 \\ --genome hg38_48 \\ --mode slurm \\ --sif-cache /data/OpenOmics/SIFs/ \\ --star-2-pass-basic 3.2 Generic SLURM Cluster \u00b6 Running the pipeline outside of Biowulf is easy; however, there are a few extra steps you must first take. Before getting started, you will need to build reference files for the pipeline. Please note when running the build sub command for the first time, you will also need to provide the --shared-resources option. This option will download our kraken2 database and bowtie2 indices for FastQ Screen. The path provided to this option should be provided to the --shared-resources option of the run sub command. Next, you will also need to provide a path to write temporary output files via the --tmp-dir option. We also recommend providing a path to a SIF cache. You can cache software containers locally with the cache sub command. # Step 0.) Grab an interactive node (do not run on head node) srun -N 1 -n 1 --time = 2 :00:00 -p interactive --mem = 8gb --cpus-per-task = 4 --pty bash # Add snakemake and singularity to $PATH, # This step may vary across clusters, you # can reach out to a sys admin if snakemake # and singularity are not installed. module purge module load singularity snakemake # Step 1.) Dry run pipeline with provided test data ./rna-seek run --input .tests/*.R?.fastq.gz \\ --output /data/ $USER /RNA_hg38 \\ --genome /data/ $USER /hg38_36/hg38_36.json \\ --mode slurm \\ --sif-cache /data/ $USER /cache \\ --star-2-pass-basic \\ --shared-resources /data/shared/rna-seek \\ --tmp-dir /cluster_scratch/ $USER / \\ --dry-run # Step 2.) Run RNA-seek pipeline # The slurm mode will submit jobs to the cluster. # It is recommended running rna-seek in this mode. ./rna-seek run --input .tests/*.R?.fastq.gz \\ --output /data/ $USER /RNA_hg38 \\ --genome /data/ $USER /hg38_36/hg38_36.json \\ --mode slurm \\ --sif-cache /data/ $USER /cache \\ --star-2-pass-basic \\ --shared-resources /data/shared/rna-seek \\ --tmp-dir /cluster_scratch/ $USER / \\ --dry-run","title":"run"},{"location":"RNA-seq/run/#rna-seek-run","text":"","title":"rna-seek run"},{"location":"RNA-seq/run/#1-about","text":"The rna-seek executable is composed of several inter-related sub commands. Please see rna-seek -h for all available options. This part of the documentation describes options and concepts for rna-seek run sub command in more detail. With minimal configuration, the run sub command enables you to start running the data processing and quality-control pipeline. Setting up the RNA-seek pipeline is fast and easy! In its most basic form, rna-seek run only has three required inputs .","title":"1. About"},{"location":"RNA-seq/run/#2-synopsis","text":"$ rna-seek run [--help] \\ [--call-gene-fusions] [--prokaryote] \\ [--small-rna] [--star-2-pass-basic] \\ [--dry-run] [--mode {slurm, local}] \\ [--shared-resources SHARED_RESOURCES] \\ [--singularity-cache SINGULARITY_CACHE] \\ [--sif-cache SIF_CACHE] \\ [--tmp-dir TMP_DIR] \\ [--threads THREADS] \\ --input INPUT [INPUT ...] \\ --output OUTPUT \\ --genome {hg38_48, mm10_M25, mm39_M37, custom.json} The synopsis for each command shows its parameters and their usage. Optional parameters are shown in square brackets. A user must provide a list of FastQ files (globbing is supported) to analyze via --input argument, an output directory to store results via --output argument and select reference genome for alignment and annotation via the --genome argument. If you are running the pipeline outside of Biowulf, you will need to additionally provide the the following options: --shared-resources , --tmp-dir . More information about each of these options can be found below. Use you can always use the -h option for information on a specific sub command.","title":"2. Synopsis"},{"location":"RNA-seq/run/#21-required-arguments","text":"Each of the following arguments are required. Failure to provide a required argument will result in a non-zero exit-code. --input INPUT [INPUT ...] Input FastQ file(s) to process. type: file One or more FastQ files can be provided. From the command-line, each FastQ file should seperated by a space. Globbing is supported! This makes selecting FastQ files easier. Input FastQ files should be gzipp-ed. The pipeline supports single-end and pair-end RNA-seq data; however, the pipeline will not process a mixture of single-end and paired-end samples together. If you have a mixture of single-end and pair-end samples to process, please process them as two seperate instances of the RNA-seek pipeline (with two seperate output directories). Example: --input .tests/*.R?.fastq.gz --output OUTPUT Path to an output directory. type: path This location is where the pipeline will create all of its output files, also known as the pipeline's working directory. If the provided output directory does not exist, it will be initialized automatically. Example: --output /data/$USER/RNA_hg38 --genome {hg38_48, mm10_M25, mm39_M37, custom.json} Reference genome. type: string or file This option defines the reference genome for your set of samples. On Biowulf, RNA-seek does comes bundled with pre built reference files for human and mouse samples; however, it is worth noting that the pipeline does accept a custom reference genome built with the build sub command. Building a new reference genome is easy! You can create a custom reference genome with a single command. This is extremely useful when working with non-model organisms. New users can reference the documentation's getting started section to see how a reference genome is built. Pre built Option Here is a list of available pre built genomes on Biowulf: hg38_48, mm10_M25, mm39_M37. Please see the resources page for more information about each pre built option. It is worth noting that hg38_30 and mm10_M21 can still be selected. They have just been hidden from the command-line interface to encourage users to select newer reference genomes. Custom Option A user can also supply a custom reference genome built with the build sub command. Please supply the custom reference JSON file that was generated by the build sub command. The name of this custom reference JSON file is dependent on the values provided to the following rna-seek build args, --ref-name REF_NAME and --gtf-ver GTF_VER , where the name of the provided custom reference JSON file would be: {REF_NAME}_{GTF_VER}.json . Example: --genome hg38_48 OR --genome /data/${USER}/hg38_36/hg38_36.json","title":"2.1 Required Arguments"},{"location":"RNA-seq/run/#22-analysis-options","text":"--call-gene-fusions Call gene fusions. type: boolean A gene fusion is a genetic alteration where two different genes become joined together, forming a new hybrid gene. If this option is provided, an extra set of steps will run to detect gene fusions with arriba. These steps will conditionally run depending on whether there are reference files for running arriba. Currently, these reference files exist for hg38 , hg19 , and mm10 . Please note if these reference are missing, then gene fusions will not be called. Example: --call-gene-fusions --prokaryote Run with prokaryotic genome alignment options. type: boolean Prokaryotic genomes, like bacteria, do not contain introns. If provided, this option will use an optimized set of options for aligning against prokaryotic genomes. This option will force STAR to avoid spliced alignments, and it will also run STAR in a 2-pass basic mode. By default, the pipeline is setup for handling alignment against eukarytoic genomes, so this option should be provided if you are working with a prokaryotic genome. This option should not be combined with the small RNA option. Example: --prokaryote --small-rna Run STAR using ENCODE's recomendations for small RNA. type: boolean This option should only be used with small RNA libraries. These are rRNA-depleted libraries that have been size selected to contain fragments shorter than 200bp. Size selection enriches for small RNA species such as miRNAs, siRNAs, or piRNAs. Also, this option should not be combined with the star 2-pass basic option. If the two options are combined, STAR will run in pass basic mode. This means that STAR will not run with ENCODE's recommendations for small RNA alignment. As so, please take caution not to combine both options together. Please note: This option is only supported with single-end data. Example: --small-rna --star-2-pass-basic Run STAR in per sample 2-pass mapping mode. type: boolean It is recommended to use this option when processing a set of unrelated samples or when processing samples in a clinical setting. It is not adivsed to use this option for a study with multiple related samples. By default, the pipeline ultilizes a multi sample 2-pass mapping approach where the set of splice junctions detected across all samples are provided to the second pass of STAR. This option overrides the default behavior so each sample will be processed in a per sample two-pass basic mode. This option should not be combined with the small RNA option. If the two options are combined, STAR will run in pass basic mode. Example: --star-2-pass-basic","title":"2.2 Analysis Options"},{"location":"RNA-seq/run/#23-orchestration-options","text":"Each of the following arguments are optional and do not need to be provided. --dry-run Dry run the pipeline. type: boolean Displays what steps in the pipeline remain or will be run. Does not execute anything! Example: --dry-run --mode {slurm,local} Execution Method. type: string default: slurm Execution Method. Defines the mode or method of execution. Vaild mode options include: slurm or local. local Local executions will run serially on compute instance. This is useful for testing, debugging, or when a users does not have access to a high performance computing environment. If this option is not provided, it will default to a local execution mode. slurm The slurm execution method will submit jobs to a cluster using a slurm + singularity backend. This method will automatically submit the master job to the cluster. It is recommended running RNA-seek in this mode as execution will be significantly faster in a distributed environment. Example: --mode slurm --shared-resources SHARED_RESOURCES Local path to shared resources. type: path The pipeline uses a set of shared reference files that can be re-used across reference genomes. These currently include reference files for kraken and FQScreen. These reference files can be downloaded with the build sub command's --shared-resources option. With that being said, these files only need to be downloaded once. We recommend storing this files in a shared location on the filesystem that other people can access. If you are running the pipeline on Biowulf, you do NOT need to download these reference files! They already exist on the filesystem in a location that anyone can acceess; however, if you are running the pipeline on another cluster or target system, you will need to download the shared resources with the build sub command, and you will need to provide this option every time you run the pipeline. Please provide the same path that was provided to the build sub command's --shared-resources option. Again, if you are running the pipeline on Biowulf, you do NOT need to provide this option. For more information about how to download shared resources, please reference the build sub command's --shared-resources option. Example: --shared-resources /data/shared/rna-seek --singularity-cache SINGULARITY_CACHE Overrides the $SINGULARITY_CACHEDIR environment variable. type: path default: --output OUTPUT/.singularity Singularity will cache image layers pulled from remote registries. This ultimately speeds up the process of pull an image from DockerHub if an image layer already exists in the singularity cache directory. By default, the cache is set to the value provided to the --output argument. Please note that this cache cannot be shared across users. Singularity strictly enforces you own the cache directory and will return a non-zero exit code if you do not own the cache directory! See the --sif-cache option to create a shareable resource. Example: --singularity-cache /data/$USER/.singularity --sif-cache SIF_CACHE Path where a local cache of SIFs are stored. type: path Uses a local cache of SIFs on the filesystem. This SIF cache can be shared across users if permissions are set correctly. If a SIF does not exist in the SIF cache, the image will be pulled from Dockerhub and a warning message will be displayed. The rna-seek cache subcommand can be used to create a local SIF cache. Please see rna-seek cache for more information. This command is extremely useful for avoiding DockerHub pull rate limits. It also remove any potential errors that could occur due to network issues or DockerHub being temporarily unavailable. We recommend running RNA-seek with this option when ever possible. Example: --sif-cache /data/$USER/SIFs --tmp-dir TMP_DIR Path on the file system for writing temporary files. type: path default: /lscratch/$SLURM_JOBID This is a path on the file system for writing temporary output files. By default, the temporary directory is set to '/lscratch/$SLURM_JOBID' for backwards compatibility with the NIH's Biowulf cluster; however, if you are running the pipeline on another cluster, this option will need to be specified. Ideally, this path should point to a dedicated location on the filesystem for writing tmp files. On many systems, this location is set to somewhere in /scratch. If you need to inject a variable into this string that should NOT be expanded, please quote this options value in single quotes. Again, if you are running the pipeline on Biowulf, you do NOT need to provide this option. Example: --tmp-dir /cluster_scratch/$USER/ --threads THREADS Max number of threads for each process. type: int default: 2 Max number of threads for each process. This option is more applicable when running the pipeline with --mode local . It is recommended setting this vaule to the maximum number of CPUs available on the host machine. Example: --threads 12","title":"2.3 Orchestration Options"},{"location":"RNA-seq/run/#24-misc-options","text":"Each of the following arguments are optional and do not need to be provided. -h, --help Display Help. type: boolean Shows command's synopsis, help message, and an example command Example: --help","title":"2.4 Misc Options"},{"location":"RNA-seq/run/#3-example","text":"","title":"3. Example"},{"location":"RNA-seq/run/#31-biowulf","text":"On Biowulf getting started with the pipeline is fast and easy! The pipeline comes bundled with pre-built human and mouse reference genomes. In the example below, we will use the pre-built human reference genome. # Step 0.) Grab an interactive node (do not run on head node) srun -N 1 -n 1 --time = 12 :00:00 -p interactive --mem = 8gb --cpus-per-task = 4 --pty bash module purge module load singularity snakemake # Step 1.) Dry run pipeline with provided test data ./rna-seek run --input .tests/*.R?.fastq.gz \\ --output /data/ $USER /RNA_hg38 \\ --genome hg38_48 \\ --mode slurm \\ --star-2-pass-basic \\ --sif-cache /data/OpenOmics/SIFs/ \\ --dry-run # Step 2.) Run RNA-seek pipeline # The slurm mode will submit jobs to the cluster. # It is recommended running rna-seek in this mode. ./rna-seek run --input .tests/*.R?.fastq.gz \\ --output /data/ $USER /RNA_hg38 \\ --genome hg38_48 \\ --mode slurm \\ --sif-cache /data/OpenOmics/SIFs/ \\ --star-2-pass-basic","title":"3.1 Biowulf"},{"location":"RNA-seq/run/#32-generic-slurm-cluster","text":"Running the pipeline outside of Biowulf is easy; however, there are a few extra steps you must first take. Before getting started, you will need to build reference files for the pipeline. Please note when running the build sub command for the first time, you will also need to provide the --shared-resources option. This option will download our kraken2 database and bowtie2 indices for FastQ Screen. The path provided to this option should be provided to the --shared-resources option of the run sub command. Next, you will also need to provide a path to write temporary output files via the --tmp-dir option. We also recommend providing a path to a SIF cache. You can cache software containers locally with the cache sub command. # Step 0.) Grab an interactive node (do not run on head node) srun -N 1 -n 1 --time = 2 :00:00 -p interactive --mem = 8gb --cpus-per-task = 4 --pty bash # Add snakemake and singularity to $PATH, # This step may vary across clusters, you # can reach out to a sys admin if snakemake # and singularity are not installed. module purge module load singularity snakemake # Step 1.) Dry run pipeline with provided test data ./rna-seek run --input .tests/*.R?.fastq.gz \\ --output /data/ $USER /RNA_hg38 \\ --genome /data/ $USER /hg38_36/hg38_36.json \\ --mode slurm \\ --sif-cache /data/ $USER /cache \\ --star-2-pass-basic \\ --shared-resources /data/shared/rna-seek \\ --tmp-dir /cluster_scratch/ $USER / \\ --dry-run # Step 2.) Run RNA-seek pipeline # The slurm mode will submit jobs to the cluster. # It is recommended running rna-seek in this mode. ./rna-seek run --input .tests/*.R?.fastq.gz \\ --output /data/ $USER /RNA_hg38 \\ --genome /data/ $USER /hg38_36/hg38_36.json \\ --mode slurm \\ --sif-cache /data/ $USER /cache \\ --star-2-pass-basic \\ --shared-resources /data/shared/rna-seek \\ --tmp-dir /cluster_scratch/ $USER / \\ --dry-run","title":"3.2 Generic SLURM Cluster"},{"location":"RNA-seq/unlock/","text":"rna-seek unlock \u00b6 1. About \u00b6 The rna-seek executable is composed of several inter-related sub commands. Please see rna-seek -h for all available options. This part of the documentation describes options and concepts for rna-seek unlock sub command in more detail. With minimal configuration, the unlock sub command enables you to unlock a pipeline output directory. If the pipeline fails ungracefully, it maybe required to unlock the working directory before proceeding again. Snakemake will inform a user when it maybe necessary to unlock a working directory with an error message stating: Error: Directory cannot be locked . Please verify that the pipeline is not running before running this command. If the pipeline is currently running, the workflow manager will report the working directory is locked. The is the default behavior of snakemake, and it is normal. Do NOT run this command if the pipeline is still running! Please kill the master job and it's child jobs prior to running this command. Unlocking an RNA-seek pipeline output directory is fast and easy! In its most basic form, rna-seek run only has one required inputs . 2. Synopsis \u00b6 $ ./rna-seek unlock [-h] --output OUTPUT The synopsis for this command shows its parameters and their usage. Optional parameters are shown in square brackets. A user must provide an output directory to unlock via --output argument. After running the unlock sub command, you can resume the build or run pipeline from where it left off by re-running it. Use you can always use the -h option for information on a specific command. 2.1 Required Arguments \u00b6 --output OUTPUT Output directory to unlock. type: path Path to a previous run's output directory to unlock. This will remove a lock on the working directory. Please verify that the pipeline is not running before running this command. Example: --output /data/$USER/RNA_hg38 2.2 Options \u00b6 Each of the following arguments are optional and do not need to be provided. -h, --help Display Help. type: boolean Shows command's synopsis, help message, and an example command Example: --help 3. Example \u00b6 # Step 0.) Grab an interactive node (do not run on head node) srun -N 1 -n 1 --time = 12 :00:00 -p interactive --mem = 8gb --cpus-per-task = 4 --pty bash module purge module load singularity snakemake # Step 1.) Unlock a pipeline output directory rna-seek unlock --output /data/ $USER /RNA_hg38","title":"unlock"},{"location":"RNA-seq/unlock/#rna-seek-unlock","text":"","title":"rna-seek unlock"},{"location":"RNA-seq/unlock/#1-about","text":"The rna-seek executable is composed of several inter-related sub commands. Please see rna-seek -h for all available options. This part of the documentation describes options and concepts for rna-seek unlock sub command in more detail. With minimal configuration, the unlock sub command enables you to unlock a pipeline output directory. If the pipeline fails ungracefully, it maybe required to unlock the working directory before proceeding again. Snakemake will inform a user when it maybe necessary to unlock a working directory with an error message stating: Error: Directory cannot be locked . Please verify that the pipeline is not running before running this command. If the pipeline is currently running, the workflow manager will report the working directory is locked. The is the default behavior of snakemake, and it is normal. Do NOT run this command if the pipeline is still running! Please kill the master job and it's child jobs prior to running this command. Unlocking an RNA-seek pipeline output directory is fast and easy! In its most basic form, rna-seek run only has one required inputs .","title":"1. About"},{"location":"RNA-seq/unlock/#2-synopsis","text":"$ ./rna-seek unlock [-h] --output OUTPUT The synopsis for this command shows its parameters and their usage. Optional parameters are shown in square brackets. A user must provide an output directory to unlock via --output argument. After running the unlock sub command, you can resume the build or run pipeline from where it left off by re-running it. Use you can always use the -h option for information on a specific command.","title":"2. Synopsis"},{"location":"RNA-seq/unlock/#21-required-arguments","text":"--output OUTPUT Output directory to unlock. type: path Path to a previous run's output directory to unlock. This will remove a lock on the working directory. Please verify that the pipeline is not running before running this command. Example: --output /data/$USER/RNA_hg38","title":"2.1 Required Arguments"},{"location":"RNA-seq/unlock/#22-options","text":"Each of the following arguments are optional and do not need to be provided. -h, --help Display Help. type: boolean Shows command's synopsis, help message, and an example command Example: --help","title":"2.2 Options"},{"location":"RNA-seq/unlock/#3-example","text":"# Step 0.) Grab an interactive node (do not run on head node) srun -N 1 -n 1 --time = 12 :00:00 -p interactive --mem = 8gb --cpus-per-task = 4 --pty bash module purge module load singularity snakemake # Step 1.) Unlock a pipeline output directory rna-seek unlock --output /data/ $USER /RNA_hg38","title":"3. Example"},{"location":"dev/coming-soon/","text":"Coming Soon \u00b6 This page is under construction, and our team is actively working on bringing you the most up-to-date documentation. Thank you for your patience!","title":"Coming Soon"},{"location":"dev/coming-soon/#coming-soon","text":"This page is under construction, and our team is actively working on bringing you the most up-to-date documentation. Thank you for your patience!","title":"Coming Soon"},{"location":"dev/lorem_ipsum/","text":"Lorem ipsum \u00b6 Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. h2 Heading \u00b6 h3 Heading \u00b6 h4 Heading \u00b6 h5 Heading \u00b6 h6 Heading \u00b6 Horizontal Rules \u00b6 Emphasis \u00b6 This is bold text This is bold text This is italic text This is italic text Strikethrough Blockquotes \u00b6 Blockquotes can also be nested... ...by using additional greater-than signs right next to each other... ...or with spaces between arrows. Lists \u00b6 Unordered Create a list by starting a line with + , - , or * Sub-lists are made by indenting 2 spaces: Marker character change forces new list start: Ac tristique libero volutpat at Facilisis in pretium nisl aliquet Nulla volutpat aliquam velit Very easy! Ordered Lorem ipsum dolor sit amet Consectetur adipiscing elit Integer molestie lorem at massa You can use sequential numbers... ...or keep all the numbers as 1. Start numbering with offset: foo bar Code \u00b6 Inline code Indented code // Some comments line 1 of code line 2 of code line 3 of code Block code \"fences\" Sample text here... Syntax highlighting var foo = function ( bar ) { return bar ++ ; }; console . log ( foo ( 5 )); Tables \u00b6 Option Description data path to data files to supply the data that will be passed into templates. engine engine to be used for processing templates. Handlebars is the default. ext extension to be used for dest files. Right-aligned columns Option Description data path to data files to supply the data that will be passed into templates. engine engine to be used for processing templates. Handlebars is the default. ext extension to be used for dest files. Links \u00b6 link text link with title Images \u00b6 Like links, Images also have a footnote style syntax With a reference later in the document defining the URL location: Plugins \u00b6 The killer feature of markdown-it is very effective support of syntax plugins . Footnotes \u00b6 Footnote 1 link 1 . Footnote 2 link 2 . Inline footnote^[Text of inline footnote] definition. Duplicated footnote reference 2 . Definition lists \u00b6 Term 1 Definition 1 with lazy continuation. Term 2 with inline markup Definition 2 { some code, part of Definition 2 } Third paragraph of definition 2. Compact style: Term 1 ~ Definition 1 Term 2 ~ Definition 2a ~ Definition 2b Footnote can have markup and multiple paragraphs. \u21a9 Footnote text. \u21a9 \u21a9","title":"Lorem ipsum"},{"location":"dev/lorem_ipsum/#lorem-ipsum","text":"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.","title":"Lorem ipsum"},{"location":"dev/lorem_ipsum/#h2-heading","text":"","title":"h2 Heading"},{"location":"dev/lorem_ipsum/#h3-heading","text":"","title":"h3 Heading"},{"location":"dev/lorem_ipsum/#h4-heading","text":"","title":"h4 Heading"},{"location":"dev/lorem_ipsum/#h5-heading","text":"","title":"h5 Heading"},{"location":"dev/lorem_ipsum/#h6-heading","text":"","title":"h6 Heading"},{"location":"dev/lorem_ipsum/#horizontal-rules","text":"","title":"Horizontal Rules"},{"location":"dev/lorem_ipsum/#emphasis","text":"This is bold text This is bold text This is italic text This is italic text Strikethrough","title":"Emphasis"},{"location":"dev/lorem_ipsum/#blockquotes","text":"Blockquotes can also be nested... ...by using additional greater-than signs right next to each other... ...or with spaces between arrows.","title":"Blockquotes"},{"location":"dev/lorem_ipsum/#lists","text":"Unordered Create a list by starting a line with + , - , or * Sub-lists are made by indenting 2 spaces: Marker character change forces new list start: Ac tristique libero volutpat at Facilisis in pretium nisl aliquet Nulla volutpat aliquam velit Very easy! Ordered Lorem ipsum dolor sit amet Consectetur adipiscing elit Integer molestie lorem at massa You can use sequential numbers... ...or keep all the numbers as 1. Start numbering with offset: foo bar","title":"Lists"},{"location":"dev/lorem_ipsum/#code","text":"Inline code Indented code // Some comments line 1 of code line 2 of code line 3 of code Block code \"fences\" Sample text here... Syntax highlighting var foo = function ( bar ) { return bar ++ ; }; console . log ( foo ( 5 ));","title":"Code"},{"location":"dev/lorem_ipsum/#tables","text":"Option Description data path to data files to supply the data that will be passed into templates. engine engine to be used for processing templates. Handlebars is the default. ext extension to be used for dest files. Right-aligned columns Option Description data path to data files to supply the data that will be passed into templates. engine engine to be used for processing templates. Handlebars is the default. ext extension to be used for dest files.","title":"Tables"},{"location":"dev/lorem_ipsum/#links","text":"link text link with title","title":"Links"},{"location":"dev/lorem_ipsum/#images","text":"Like links, Images also have a footnote style syntax With a reference later in the document defining the URL location:","title":"Images"},{"location":"dev/lorem_ipsum/#plugins","text":"The killer feature of markdown-it is very effective support of syntax plugins .","title":"Plugins"},{"location":"dev/lorem_ipsum/#footnotes","text":"Footnote 1 link 1 . Footnote 2 link 2 . Inline footnote^[Text of inline footnote] definition. Duplicated footnote reference 2 .","title":"Footnotes"},{"location":"dev/lorem_ipsum/#definition-lists","text":"Term 1 Definition 1 with lazy continuation. Term 2 with inline markup Definition 2 { some code, part of Definition 2 } Third paragraph of definition 2. Compact style: Term 1 ~ Definition 1 Term 2 ~ Definition 2a ~ Definition 2b Footnote can have markup and multiple paragraphs. \u21a9 Footnote text. \u21a9 \u21a9","title":"Definition lists"}]}